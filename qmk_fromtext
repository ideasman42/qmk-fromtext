#!/usr/bin/env python3
# Licensed: GPL v2+

'''
Example Use
===========

Run the command::

    ./qmk_fromtext example_keymaps/simple.py

    This will write out: "example_keymaps/simple.hex"

Then you can upload the newly created hex::

    teensy_loader_cli -mmcu=atmega32u4 -w -v examples/simple.hex

To see available keys to use in your keymap run::

    ./qmk_fromtext --list-keys


Maintenance
===========

Not for regular usage, for updating this file.

To update the inlined binary::

   ./qmk_fromtext --update-from-bin /src/qmk_firmware/out.bin

Note that if you want to create this from the hex:

   objcopy -I ihex out.hex -O binary out.bin

To update based on the key definitions::

   ./qmk_fromtext --update-from-keycode /src/qmk_firmware/tmk_core/common/keycode.h

To write out the C code used to generate the keymap used as a basis::

    ./qmk_fromtext --write-keymap-source keymap.c
'''

import sys
import os
import re

# Ergodox layer len
KEYLAYER_LEN = 76

# pass to isinstance
KEYCODE_TYPES = (int, type(...), type(None))

# Offset numbers so we can use 0-9 literals
_keycode_offset = 255


# -----------------------------------------------------------------------------
# Key Codes
#
# Try avoid too many of these.

KEYCODE_MOMENTARY = 0x5100
KEYCODE_LSHIFT = 0x0200

# No offset applied
KEYCODE_DIGIT_MAP = {
    1: 0x1e,
    2: 0x1f,
    3: 0x20,
    4: 0x21,
    5: 0x22,
    6: 0x23,
    7: 0x24,
    8: 0x25,
    9: 0x26,
    0: 0x27,
}

# -----------------------------------------------------------------------------
# Utility Functions

def keycode_strip(s):
    if s.startswith('KC__'):
        return s[4:]
    elif s.startswith('KC_'):
        return s[3:]
    else:
        return s


def message_list_keys():
    justify = 16
    rev = {}
    for k, v in _keycode.items():
        rev.setdefault(v, []).append(k)

    print('...'.ljust(justify), '(alias for "ROLL_OVER": pass through to he next active layer)')
    print('None'.ljust(justify), '(alias for "NO": do nothing)')
    for i in range(10):
        print(i)
    for i, k in sorted(rev.items()):
        if len(k) == 1:
            print(k[0])
        else:
            print(' '.join([w.ljust(justify) for w in k]))


def binary_as_py_byte_literal(data, line_length, sep='\n'):
    line_len_to_bytes = (line_length - 3) // 4
    l = []

    def chunker(seq, size):
        for pos in range(0, len(data), size):
            yield seq[pos:pos + size]
    for c in chunker(data, line_len_to_bytes):
        l.append('b\'' + ''.join([f'\\x{i:02x}' for i in c]) + '\'')
    return sep.join(l)


def write_hex_file(f, byte_data):
    '''
    Write data to file f in HEX format.
    '''
    from array import array
    from bisect import bisect_right
    from binascii import hexlify
    # from intelhex module
    fwrite = f.write

    table = bytes(list(range(256))).upper()

    # data
    addresses = list(range(len(byte_data)))
    addr_len = len(addresses)
    if addr_len:
        minaddr = addresses[0]
        maxaddr = addresses[-1]
        need_offset_record = maxaddr > 65535
        high_ofs = 0

        cur_addr = minaddr
        cur_ix = 0

        while cur_addr <= maxaddr:
            if need_offset_record:
                bin = array('B', asbytes('\0' * 7))
                bin[0] = 2      # reclen
                bin[1] = 0      # offset msb
                bin[2] = 0      # offset lsb
                bin[3] = 4      # rectyp
                high_ofs = int(cur_addr >> 16)
                b = divmod(high_ofs, 256)
                bin[4] = b[0]   # msb of high_ofs
                bin[5] = b[1]   # lsb of high_ofs
                bin[6] = (-sum(bin)) & 0x0FF    # chksum
                fwrite(':' +
                       hexlify(bin.tobytes()).translate(table).decode('ascii') +
                       '\n')

            while True:
                # produce one record
                low_addr = cur_addr & 0x0FFFF
                # chain_len off by 1
                chain_len = min(15, 65535 - low_addr, maxaddr - cur_addr)

                # search continuous chain
                stop_addr = cur_addr + chain_len
                if chain_len:
                    ix = bisect_right(addresses, stop_addr,
                                      cur_ix,
                                      min(cur_ix + chain_len + 1, addr_len))
                    chain_len = ix - cur_ix     # real chain_len
                    # there could be small holes in the chain
                    # but we will catch them by try-except later
                    # so for big continuous files we will work
                    # at maximum possible speed
                else:
                    chain_len = 1               # real chain_len

                bin = array('B', b'\0' * (5 + chain_len))
                b = divmod(low_addr, 256)
                bin[1] = b[0]   # msb of low_addr
                bin[2] = b[1]   # lsb of low_addr
                bin[3] = 0          # rectype
                try:    # if there is small holes we'll catch them
                    for i in range(chain_len):
                        bin[4 + i] = byte_data[cur_addr + i]
                except KeyError:
                    # we catch a hole so we should shrink the chain
                    chain_len = i
                    bin = bin[:5 + i]
                bin[0] = chain_len
                bin[4 + chain_len] = (-sum(bin)) & 0x0FF    # chksum
                fwrite(':' +
                       hexlify(bin.tobytes()).translate(table).decode('ascii') +
                       '\n')

                # adjust cur_addr/cur_ix
                cur_ix += chain_len
                if cur_ix < addr_len:
                    cur_addr = addresses[cur_ix]
                else:
                    cur_addr = maxaddr + 1
                    break
                high_addr = int(cur_addr >> 16)
                if high_addr > high_ofs:
                    break
    # end-of-file record
    fwrite(":00000001FF\n")


def qmk_binary_unpack():
    import lzma
    data = lzma.decompress(_binary)
    return data, _binary_offsets


# -----------------------------------------------------------------------------
# Maintenance Functions

def keycode_remap(
    # left hand, spatial positions
    k00, k01, k02, k03, k04, k05, k06,
    k10, k11, k12, k13, k14, k15, k16,
    k20, k21, k22, k23, k24, k25,
    k30, k31, k32, k33, k34, k35, k36,
    k40, k41, k42, k43, k44, 
                                  k55, k56,
                                       k54,
                             k53, k52, k51,

    # right hand, spatial positions
         k07, k08, k09, k0A, k0B, k0C, k0D,
         k17, k18, k19, k1A, k1B, k1C, k1D,
              k28, k29, k2A, k2B, k2C, k2D,
         k37, k38, k39, k3A, k3B, k3C, k3D,
                   k49, k4A, k4B, k4C, k4D,
    k57, k58,
    k59,
    k5C, k5B, k5A,
):
    # matrix positions
    NIL = b'\x00\x00'
    return [
        *[k00, k10, k20, k30, k40, NIL],
        *[k01, k11, k21, k31, k41, k51],
        *[k02, k12, k22, k32, k42, k52],
        *[k03, k13, k23, k33, k43, k53],
        *[k04, k14, k24, k34, k44, k54],
        *[k05, k15, k25, k35, NIL, k55],
        *[k06, k16, NIL, k36, NIL, k56],
        *[k07, k17, NIL, k37, NIL, k57],
        *[k08, k18, k28, k38, NIL, k58],
        *[k09, k19, k29, k39, k49, k59],
        *[k0A, k1A, k2A, k3A, k4A, k5A],
        *[k0B, k1B, k2B, k3B, k4B, k5B],
        *[k0C, k1C, k2C, k3C, k4C, k5C],
        *[k0D, k1D, k2D, k3D, k4D, NIL],
    ]


def update_from_bin(filename):
    '''
    Takes binary file (converted from hex using hex2bin)
    '''
    with open(filename, 'rb') as fh:
        data = fh.read()

    # find offsets
    match = [b'\xFA\xFA'] + ([b'\x00\x00'] * 81) + [b'\xAF\xAF']
    match = b''.join(match) 

    matches = []
    i_prev = 0
    while True:
        i = data.find(match, i_prev)
        if i != -1:
            matches.append(i)
            i_prev = i + len(match)
        else:
            break

    if not matches:
        print('Could not match against pattern:', match)
        import sys
        sys.exit(0)

    # clear the data for better compression:
    data = bytearray(data)
    for i in matches:
        for j in range(i, i + len(match)):
            data[j] = 0
    import lzma
    data = lzma.compress(data)

    def swap_in_binary_data(string):
        pattern = r"(^#\s*BINARY\s+BEGIN)(.*?)(^#\s*BINARY\s+END)"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)

        def _replacer(match):
            return ''.join([
                match.group(1),
                '\n',
                f'_binary_offsets = {tuple(matches)}\n',
                '_binary = (\n    ',
                binary_as_py_byte_literal(data, 116, '\n    '),
                '\n)\n',
                match.group(3)])
        return regex.sub(_replacer, string)

    # perform the update:
    with open(__file__, 'r', encoding='utf-8') as fh:
        this_script = fh.read()

    this_script = swap_in_binary_data(this_script)

    with open(__file__, 'w', encoding='utf-8') as fh:
        fh.write(this_script)


def update_from_keycode(filename):

    def remove_comments(string):
        pattern = r"(\".*?\"|\'.*?\')|(/\*.*?\*/|//[^\r\n]*$)"
        # first group captures quoted strings (double or single)
        # second group captures comments (//single-line or /* multi-line */)
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)

        def _replacer(match):
            # if the 2nd group (capturing comments) is not None,
            # it means we have captured a non-quoted (real) comment string.
            if match.group(2) is not None:
                return ""  # so we will return empty to remove the comment
            else:  # otherwise, we will return the 1st group
                return match.group(1)  # captured quoted-string
        return regex.sub(_replacer, string)

    def remove_if0(string):
        pattern = r"(^\s*#\s*if\s+0\b.*?^\s*#\s*endif)"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)
        return regex.sub("", string)

    def remove_defines(string):
        # doesn't do multi-line defines.
        pattern = r"(^\s*#\s*define.*?$)"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)
        return regex.sub("", string)

    def extract_enums(string):
        pattern = r"(\benum\s[a-zA-Z0-9_]+\s*\{)(.*?)(\})"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)
        enums = []

        def _replacer(match):
            def strip_spaces(words):
                for w in words:
                    w = w.strip()
                    if w:
                        yield w
            enums.extend(strip_spaces(match.group(2).split(',')))
            return None
        regex.sub(_replacer, string)
        return enums

    def extract_defs(string):
        pattern = r"(^\s*#\s*define\s+)([A-Za-z0-9_]+)([ \t]*)([^\n]*)"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)
        defs = []

        def _replacer(match):
            defs.append((match.group(2), match.group(4)))
            return None
        regex.sub(_replacer, string)
        return defs

    def enums_from_file(header):
        # first strip comments
        with open(header, 'r', encoding='utf-8') as fh:
            data = fh.read()
        data = remove_comments(data)
        data = remove_if0(data)
        data = remove_defines(data)
        enums = extract_enums(data)
        enums = [[e, -1] for e in enums]
        i = 0
        for ep in enums:
            e = ep[0]
            if '=' in e:
                e, n = e.split('=')
                e = e.strip()
                n = eval(n.strip())
                i = n
            e = keycode_strip(e)
            ep[0] = e
            ep[1] = i
            i += 1

        # literal numbers can map separately
        enums = [(e, n) for e, n in enums if not e.isdigit()]
        return enums

    def defines_from_file(header):
        # first strip comments
        with open(header, 'r', encoding='utf-8') as fh:
            data = fh.read()
        data = remove_comments(data)
        defs = extract_defs(data)
        return defs

    enums = enums_from_file(filename)
    enums_map = {e: n for e, n in enums}
    defs = defines_from_file(filename)

    def keycode_as_literal(enums):
        return '\n'.join(f'    {e}=0x{n:x},' for e, n in enums)

    def keycode_as_literal_defs(enums, defs):
        data = []
        for d, v in defs:
            if d.startswith('KC_'):
                d = keycode_strip(d)
                if v[0].isdigit():
                    n = eval(v)
                else:
                    n = enums_map.get(keycode_strip(v))
                    if n is None:
                        if v not in {
                                'KC_TRANSPARENT',
                        }:
                            print('Missing:', v)
                        continue
                data.append(f'    {d}=0x{n:x},')
        return '\n'.join(data)

    def keycode_momentary():
        data = []
        for i in range(8):
            n = (i | KEYCODE_MOMENTARY)
            data.append(f'    MO{i}=0x{n:x},')
        return '\n'.join(data)

    def keycode_shifted():
        # ./quantum/quantum_keycodes.h (manually extracted)
        return '\n'.join((
            ('    TILD={v},  # ~\n'
             '    TILDE={v},'.format(v=(enums_map['GRAVE'] | KEYCODE_LSHIFT))),
            ('    EXLM={v},  # !\n'
             '    EXCLAIM={v},'.format(v=(KEYCODE_DIGIT_MAP[1] | KEYCODE_LSHIFT))),
            ('    AT={v},  # @'.format(v=(KEYCODE_DIGIT_MAP[2] | KEYCODE_LSHIFT))),
            ('    HASH={v},  # #'.format(v=(KEYCODE_DIGIT_MAP[3] | KEYCODE_LSHIFT))),
            ('    DLR={v},  # $\n'
             '    DOLLAR={v},'.format(v=(KEYCODE_DIGIT_MAP[4] | KEYCODE_LSHIFT))),
            ('    PERC={v},  # %\n'
             '    PERCENT={v},'.format(v=(KEYCODE_DIGIT_MAP[5] | KEYCODE_LSHIFT))),
            ('    CIRC={v},  # ^\n'
             '    CIRCUMFLEX={v},'.format(v=(KEYCODE_DIGIT_MAP[6] | KEYCODE_LSHIFT))),
            ('    AMPR={v},  # &\n'
             '    AMPERSAND={v},'.format(v=(KEYCODE_DIGIT_MAP[7] | KEYCODE_LSHIFT))),
            ('    ASTR={v},  # *\n'
             '    ASTERISK={v},'.format(v=(KEYCODE_DIGIT_MAP[8] | KEYCODE_LSHIFT))),
            ('    LPRN={v},  # (\n'
             '    LEFT_PAREN={v},'.format(v=(KEYCODE_DIGIT_MAP[9] | KEYCODE_LSHIFT))),
            ('    RPRN={v},  # )\n'
             '    RIGHT_PAREN={v},'.format(v=(KEYCODE_DIGIT_MAP[0] | KEYCODE_LSHIFT))),
            ('    UNDS={v},  # _\n'
             '    UNDERSCORE={v},'.format(v=(enums_map['MINUS'] | KEYCODE_LSHIFT))),
            ('    PLUS={v},  # +'.format(v=(enums_map['EQUAL'] | KEYCODE_LSHIFT))),
            ('    LCBR={v},  # {{\n'
             '    LEFT_CURLY_BRACE={v},'.format(v=(enums_map['LBRACKET'] | KEYCODE_LSHIFT))),
            ('    RCBR={v},  # }}\n'
             '    RIGHT_CURLY_BRACE={v},'.format(v=(enums_map['RBRACKET'] | KEYCODE_LSHIFT))),
            ('    LABK={v},  # <\n'
             '    LEFT_ANGLE_BRACKET={v},'
             '    LT={v},'.format(v=(enums_map['COMMA'] | KEYCODE_LSHIFT))),
            ('    RABK={v},  # >\n'
             '    RIGHT_ANGLE_BRACKET={v},'
             '    GT={v},'.format(v=(enums_map['DOT'] | KEYCODE_LSHIFT))),
            ('    COLN={v},  # :\n'
             '    COLON={v},'.format(v=(enums_map['SCOLON'] | KEYCODE_LSHIFT))),
            ('    PIPE={v},  # |\n'
             '    QUES={v},'.format(v=(enums_map['BSLASH'] | KEYCODE_LSHIFT))),
            ('    DQT={v},  # "\n'
             '    DOUBLE_QUOTE={v},'
             '    DQUO={v},'.format(v=(enums_map['QUOTE'] | KEYCODE_LSHIFT))),
        ))

    def keycode_other():
        return '\n'.join((
            # quantum/dynamic_macro.h
            ('    DELT={v},\n'.format(v=(enums_map['DELETE']))),
        ))

    def swap_in_keycode(string):
        pattern = r"(^#\s*KEYCODE\s+BEGIN)(.*?)(^#\s*KEYCODE\s+END)"
        regex = re.compile(pattern, re.MULTILINE | re.DOTALL)

        def _replacer(match):
            return ''.join([
                match.group(1),
                '\n',
                '_keycode = {}\n'
                '_keycode.update(dict(\n', keycode_as_literal(enums), '\n))\n',
                '# Short key-codes.\n',
                '_keycode.update(dict(\n', keycode_as_literal_defs(enums, defs), '\n))\n',
                '# Momentary key-codes.\n',
                '_keycode.update(dict(\n', keycode_momentary(), '\n))\n',
                '_keycode.update(dict(\n', keycode_shifted(), '\n))\n',
                '_keycode.update(dict(\n', keycode_other(), '\n))\n',
                match.group(3)])
        return regex.sub(_replacer, string)

    with open(__file__, 'r', encoding='utf-8') as fh:
        this_script = fh.read()

    this_script = swap_in_keycode(this_script)

    with open(__file__, 'w', encoding='utf-8') as fh:
        fh.write(this_script)


def write_keymap_source(filename):
    with open(filename, 'w', encoding='utf-8') as fh:
        fh.write(r'''
#include QMK_KEYBOARD_H
#include "debug.h"
#include "action_layer.h"
#include "version.h"

// #define USE_DYNAMIC_MACRO

/* Layer defines (for readability) */
#define LAYER_ID_0 0
#define LAYER_ID_1 1
#define LAYER_ID_2 2
#define LAYER_ID_3 3
#define LAYER_ID_4 4
#define LAYER_ID_5 5
#define LAYER_ID_6 6
#define LAYER_ID_7 7

enum custom_keycodes {
  PLACEHOLDER = SAFE_RANGE,

  /* Macro defines (for readability) */

  CUSTOM_KEYCODE_END,

#ifdef USE_DYNAMIC_MACRO
  DYNAMIC_MACRO_RANGE = CUSTOM_KEYCODE_END,
#endif
};

#ifdef USE_DYNAMIC_MACRO
#include "dynamic_macro.h"
#endif

#define LAYOUT_STUB LAYOUT_ergodox( \
  0xFAFA, 0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, \
  0x0,    0x0, \
  0x0, \
  0x0,    0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0x0, 0x0, 0x0, \
  0x0,    0x0, 0x0,    0x0, 0xAFAF, \
  0x0,    0x0, \
  0x0, \
  0x0,    0x0, 0x0 \
)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
[LAYER_ID_0] = LAYOUT_STUB,
[LAYER_ID_1] = LAYOUT_STUB,
[LAYER_ID_2] = LAYOUT_STUB,
[LAYER_ID_3] = LAYOUT_STUB,
[LAYER_ID_4] = LAYOUT_STUB,
[LAYER_ID_5] = LAYOUT_STUB,
[LAYER_ID_6] = LAYOUT_STUB,
[LAYER_ID_7] = LAYOUT_STUB,
};
/* end 'keymaps' */


/* Runs just one time when the keyboard initializes. */
void matrix_init_user(void) {
}

const uint16_t PROGMEM fn_actions[] = {
  [1] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_0), /* FN1 (momentary) */
  [2] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_2), /* FN2 (momentary) */
  [3] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_3), /* FN3 (momentary) */
  [4] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_4), /* FN4 (momentary) */
  [5] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_5), /* FN5 (momentary) */
  [6] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_6), /* FN6 (momentary) */
  [7] = ACTION_LAYER_TAP_TOGGLE(LAYER_ID_7), /* FN7 (momentary) */
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
#ifdef USE_DYNAMIC_MACRO
  if (!process_record_dynamic_macro(keycode, record)) {
    return false;
  }
#endif
  return true;
}

/* Runs constantly in the background, in a loop. */
void matrix_scan_user(void) {
  uint8_t layer = biton32(layer_state);

  ergodox_board_led_off();
  ergodox_right_led_1_off();
  ergodox_right_led_2_off();
  ergodox_right_led_3_off();
  switch (layer) {
    case 1:
      ergodox_right_led_1_on();
      break;
    case 2:
      ergodox_right_led_2_on();
      break;
    case 3:
      ergodox_right_led_3_on();
      break;
    case 4:
      ergodox_right_led_1_on();
      ergodox_right_led_2_on();
      break;
    case 5:
      ergodox_right_led_1_on();
      ergodox_right_led_3_on();
      break;
    case 6:
      ergodox_right_led_2_on();
      ergodox_right_led_3_on();
      break;
    case 7:
      ergodox_right_led_1_on();
      ergodox_right_led_2_on();
      ergodox_right_led_3_on();
      break;
    default:
      /* none */
      break;
  }
}
''')


def create_hex_from_config(filename):
    with open(filename, 'r', encoding='utf-8') as fh:
        cfg = fh.read()

    bin, bin_offsets = qmk_binary_unpack()
    bin = bytearray(bin)

    def translate_key(k):
        if k is ...:
            return _keycode['TRANSPARENT']
        elif k is None:
            return _keycode['NO']
        elif k < _keycode_offset:
            return KEYCODE_DIGIT_MAP[k]
        else:
            return k - _keycode_offset

    # offset so we can detect 0-9 as regular keys
    namespace = {k: v + _keycode_offset for k, v in _keycode.items()}

    try:
        keymap = eval(cfg, None, namespace)
    except:
        print(f'Error evaluating "{filename}"')
        import traceback
        traceback.print_exc()
        sys.exit(1)

    if len(keymap) == 0:
        print(f'Keymap "{filename}" has no layers')
        sys.exit(1)

    if len(keymap) > len(bin_offsets):
        print(
            f'Keymap "{filename}" has {len(keymap)} layers, '
            f'no more than {len(bin_offsets)} supported'
        )
        sys.exit(1)

    for i, l in enumerate(keymap):
        if len(l) != KEYLAYER_LEN:
            print(f'Keymap "{filename}" layer {i} has {len(l)} keys, expected {KEYLAYER_LEN}')
            sys.exit(1)
        for j, k in enumerate(l):
            if not isinstance(k, KEYCODE_TYPES):
                print(
                    f'Keymap "{filename}" layer {i}, '
                    f'character {j} has key of type "{type(k)}", '
                    f'expected {KEYCODE_TYPES}'
                )
                sys.exit(1)

    from struct import pack
    keymap = tuple(keycode_remap(*tuple(pack('<h', translate_key(k)) for k in l)) for l in keymap)

    for i, l in enumerate(keymap):
        ofs = bin_offsets[i]
        for k in l:
            bin[ofs] = k[0]
            ofs += 1
            bin[ofs] = k[1]
            ofs += 1

    out = os.path.splitext(filename)[0] + '.hex'
    with open(out, 'w', encoding='utf-8') as fh:
        write_hex_file(fh, bin)
    print(f'Hex: {out} written.')


def index_or(l, i, default=None):
    try:
        return l.index(i)
    except ValueError:
        return default


def main():
    # Own arg parsing for now, may go with 'argparse' later if it's needed.
    i = index_or(sys.argv, "--help")
    if (i is not None) or (os.path.exists(sys.argv[-1]) and os.path.samefile(sys.argv[-1], __file__)):
        print(__doc__)
        sys.exit(0)

    i = index_or(sys.argv, "--update-from-bin")
    if i is not None:
        update_from_bin(sys.argv[i + 1])
        sys.exit(0)

    i = index_or(sys.argv, "--update-from-keycode")
    if i is not None:
        update_from_keycode(sys.argv[i + 1])
        sys.exit(0)

    i = index_or(sys.argv, "--write-keymap-source")
    if i is not None:
        write_keymap_source(sys.argv[i + 1])
        sys.exit(0)

    i = index_or(sys.argv, "--list-keys")
    if i is not None:
        message_list_keys()
        sys.exit(0)

    # Expect a configuration argument.
    config = sys.argv[-1]
    create_hex_from_config(config)


# Can be auto-updated by '--update-from-keycode'
# KEYCODE BEGIN
_keycode = {}
_keycode.update(dict(
    NO=0x0,
    ROLL_OVER=0x1,
    POST_FAIL=0x2,
    UNDEFINED=0x3,
    A=0x4,
    B=0x5,
    C=0x6,
    D=0x7,
    E=0x8,
    F=0x9,
    G=0xa,
    H=0xb,
    I=0xc,
    J=0xd,
    K=0xe,
    L=0xf,
    M=0x10,
    N=0x11,
    O=0x12,
    P=0x13,
    Q=0x14,
    R=0x15,
    S=0x16,
    T=0x17,
    U=0x18,
    V=0x19,
    W=0x1a,
    X=0x1b,
    Y=0x1c,
    Z=0x1d,
    ENTER=0x28,
    ESCAPE=0x29,
    BSPACE=0x2a,
    TAB=0x2b,
    SPACE=0x2c,
    MINUS=0x2d,
    EQUAL=0x2e,
    LBRACKET=0x2f,
    RBRACKET=0x30,
    BSLASH=0x31,
    NONUS_HASH=0x32,
    SCOLON=0x33,
    QUOTE=0x34,
    GRAVE=0x35,
    COMMA=0x36,
    DOT=0x37,
    SLASH=0x38,
    CAPSLOCK=0x39,
    F1=0x3a,
    F2=0x3b,
    F3=0x3c,
    F4=0x3d,
    F5=0x3e,
    F6=0x3f,
    F7=0x40,
    F8=0x41,
    F9=0x42,
    F10=0x43,
    F11=0x44,
    F12=0x45,
    PSCREEN=0x46,
    SCROLLLOCK=0x47,
    PAUSE=0x48,
    INSERT=0x49,
    HOME=0x4a,
    PGUP=0x4b,
    DELETE=0x4c,
    END=0x4d,
    PGDOWN=0x4e,
    RIGHT=0x4f,
    LEFT=0x50,
    DOWN=0x51,
    UP=0x52,
    NUMLOCK=0x53,
    KP_SLASH=0x54,
    KP_ASTERISK=0x55,
    KP_MINUS=0x56,
    KP_PLUS=0x57,
    KP_ENTER=0x58,
    KP_1=0x59,
    KP_2=0x5a,
    KP_3=0x5b,
    KP_4=0x5c,
    KP_5=0x5d,
    KP_6=0x5e,
    KP_7=0x5f,
    KP_8=0x60,
    KP_9=0x61,
    KP_0=0x62,
    KP_DOT=0x63,
    NONUS_BSLASH=0x64,
    APPLICATION=0x65,
    POWER=0x66,
    KP_EQUAL=0x67,
    F13=0x68,
    F14=0x69,
    F15=0x6a,
    F16=0x6b,
    F17=0x6c,
    F18=0x6d,
    F19=0x6e,
    F20=0x6f,
    F21=0x70,
    F22=0x71,
    F23=0x72,
    F24=0x73,
    EXECUTE=0x74,
    HELP=0x75,
    MENU=0x76,
    SELECT=0x77,
    STOP=0x78,
    AGAIN=0x79,
    UNDO=0x7a,
    CUT=0x7b,
    COPY=0x7c,
    PASTE=0x7d,
    FIND=0x7e,
    MUTE=0x7f,
    VOLUP=0x80,
    VOLDOWN=0x81,
    LOCKING_CAPS=0x82,
    LOCKING_NUM=0x83,
    LOCKING_SCROLL=0x84,
    KP_COMMA=0x85,
    KP_EQUAL_AS400=0x86,
    INT1=0x87,
    INT2=0x88,
    INT3=0x89,
    INT4=0x8a,
    INT5=0x8b,
    INT6=0x8c,
    INT7=0x8d,
    INT8=0x8e,
    INT9=0x8f,
    LANG1=0x90,
    LANG2=0x91,
    LANG3=0x92,
    LANG4=0x93,
    LANG5=0x94,
    LANG6=0x95,
    LANG7=0x96,
    LANG8=0x97,
    LANG9=0x98,
    ALT_ERASE=0x99,
    SYSREQ=0x9a,
    CANCEL=0x9b,
    CLEAR=0x9c,
    PRIOR=0x9d,
    RETURN=0x9e,
    SEPARATOR=0x9f,
    OUT=0xa0,
    OPER=0xa1,
    CLEAR_AGAIN=0xa2,
    CRSEL=0xa3,
    EXSEL=0xa4,
    LCTRL=0xe0,
    LSHIFT=0xe1,
    LALT=0xe2,
    LGUI=0xe3,
    RCTRL=0xe4,
    RSHIFT=0xe5,
    RALT=0xe6,
    RGUI=0xe7,
    SYSTEM_POWER=0xa5,
    SYSTEM_SLEEP=0xa6,
    SYSTEM_WAKE=0xa7,
    AUDIO_MUTE=0xa8,
    AUDIO_VOL_UP=0xa9,
    AUDIO_VOL_DOWN=0xaa,
    MEDIA_NEXT_TRACK=0xab,
    MEDIA_PREV_TRACK=0xac,
    MEDIA_STOP=0xad,
    MEDIA_PLAY_PAUSE=0xae,
    MEDIA_SELECT=0xaf,
    MEDIA_EJECT=0xb0,
    MAIL=0xb1,
    CALCULATOR=0xb2,
    MY_COMPUTER=0xb3,
    WWW_SEARCH=0xb4,
    WWW_HOME=0xb5,
    WWW_BACK=0xb6,
    WWW_FORWARD=0xb7,
    WWW_STOP=0xb8,
    WWW_REFRESH=0xb9,
    WWW_FAVORITES=0xba,
    MEDIA_FAST_FORWARD=0xbb,
    MEDIA_REWIND=0xbc,
    FN0=0xc0,
    FN1=0xc1,
    FN2=0xc2,
    FN3=0xc3,
    FN4=0xc4,
    FN5=0xc5,
    FN6=0xc6,
    FN7=0xc7,
    FN8=0xc8,
    FN9=0xc9,
    FN10=0xca,
    FN11=0xcb,
    FN12=0xcc,
    FN13=0xcd,
    FN14=0xce,
    FN15=0xcf,
    FN16=0xd0,
    FN17=0xd1,
    FN18=0xd2,
    FN19=0xd3,
    FN20=0xd4,
    FN21=0xd5,
    FN22=0xd6,
    FN23=0xd7,
    FN24=0xd8,
    FN25=0xd9,
    FN26=0xda,
    FN27=0xdb,
    FN28=0xdc,
    FN29=0xdd,
    FN30=0xde,
    FN31=0xdf,
    MS_UP=0xf0,
    MS_DOWN=0xf1,
    MS_LEFT=0xf2,
    MS_RIGHT=0xf3,
    MS_BTN1=0xf4,
    MS_BTN2=0xf5,
    MS_BTN3=0xf6,
    MS_BTN4=0xf7,
    MS_BTN5=0xf8,
    MS_WH_UP=0xf9,
    MS_WH_DOWN=0xfa,
    MS_WH_LEFT=0xfb,
    MS_WH_RIGHT=0xfc,
    MS_ACCEL0=0xfd,
    MS_ACCEL1=0xfe,
    MS_ACCEL2=0xff,
))
# Short key-codes.
_keycode.update(dict(
    LCTL=0xe0,
    RCTL=0xe4,
    LSFT=0xe1,
    RSFT=0xe5,
    ESC=0x29,
    BSPC=0x2a,
    ENT=0x28,
    DEL=0x4c,
    INS=0x49,
    CAPS=0x39,
    CLCK=0x39,
    RGHT=0x4f,
    PGDN=0x4e,
    PSCR=0x46,
    SLCK=0x47,
    PAUS=0x48,
    BRK=0x48,
    NLCK=0x53,
    SPC=0x2c,
    MINS=0x2d,
    EQL=0x2e,
    GRV=0x35,
    RBRC=0x30,
    LBRC=0x2f,
    COMM=0x36,
    BSLS=0x31,
    SLSH=0x38,
    SCLN=0x33,
    QUOT=0x34,
    APP=0x65,
    NUHS=0x32,
    NUBS=0x64,
    LCAP=0x82,
    LNUM=0x83,
    LSCR=0x84,
    ERAS=0x99,
    CLR=0x9c,
    ZKHK=0x35,
    RO=0x87,
    KANA=0x88,
    JYEN=0x89,
    HENK=0x8a,
    MHEN=0x8b,
    HAEN=0x90,
    HANJ=0x91,
    P1=0x59,
    P2=0x5a,
    P3=0x5b,
    P4=0x5c,
    P5=0x5d,
    P6=0x5e,
    P7=0x5f,
    P8=0x60,
    P9=0x61,
    P0=0x62,
    PDOT=0x63,
    PCMM=0x85,
    PSLS=0x54,
    PAST=0x55,
    PMNS=0x56,
    PPLS=0x57,
    PEQL=0x67,
    PENT=0x58,
    EXEC=0x74,
    SLCT=0x77,
    AGIN=0x79,
    PSTE=0x7d,
    MS_U=0xf0,
    MS_D=0xf1,
    MS_L=0xf2,
    MS_R=0xf3,
    BTN1=0xf4,
    BTN2=0xf5,
    BTN3=0xf6,
    BTN4=0xf7,
    BTN5=0xf8,
    WH_U=0xf9,
    WH_D=0xfa,
    WH_L=0xfb,
    WH_R=0xfc,
    ACL0=0xfd,
    ACL1=0xfe,
    ACL2=0xff,
    PWR=0xa5,
    SLEP=0xa6,
    WAKE=0xa7,
    MUTE=0xa8,
    VOLU=0xa9,
    VOLD=0xaa,
    MNXT=0xab,
    MPRV=0xac,
    MFFD=0xbb,
    MRWD=0xbc,
    MSTP=0xad,
    MPLY=0xae,
    MSEL=0xaf,
    EJCT=0xb0,
    MAIL=0xb1,
    CALC=0xb2,
    MYCM=0xb3,
    WSCH=0xb4,
    WHOM=0xb5,
    WBAK=0xb6,
    WFWD=0xb7,
    WSTP=0xb8,
    WREF=0xb9,
    WFAV=0xba,
    TRANSPARENT=0x1,
))
# Momentary key-codes.
_keycode.update(dict(
    MO0=0x5100,
    MO1=0x5101,
    MO2=0x5102,
    MO3=0x5103,
    MO4=0x5104,
    MO5=0x5105,
    MO6=0x5106,
    MO7=0x5107,
))
_keycode.update(dict(
    TILD=565,  # ~
    TILDE=565,
    EXLM=542,  # !
    EXCLAIM=542,
    AT=543,  # @
    HASH=544,  # #
    DLR=545,  # $
    DOLLAR=545,
    PERC=546,  # %
    PERCENT=546,
    CIRC=547,  # ^
    CIRCUMFLEX=547,
    AMPR=548,  # &
    AMPERSAND=548,
    ASTR=549,  # *
    ASTERISK=549,
    LPRN=550,  # (
    LEFT_PAREN=550,
    RPRN=551,  # )
    RIGHT_PAREN=551,
    UNDS=557,  # _
    UNDERSCORE=557,
    PLUS=558,  # +
    LCBR=559,  # {
    LEFT_CURLY_BRACE=559,
    RCBR=560,  # }
    RIGHT_CURLY_BRACE=560,
    LABK=566,  # <
    LEFT_ANGLE_BRACKET=566,    LT=566,
    RABK=567,  # >
    RIGHT_ANGLE_BRACKET=567,    GT=567,
    COLN=563,  # :
    COLON=563,
    PIPE=561,  # |
    QUES=561,
    DQT=564,  # "
    DOUBLE_QUOTE=564,    DQUO=564,
))
_keycode.update(dict(
    DELT=76,

))
# KEYCODE END

# Can be auto-updated by '--update-from-bin'
# Uses build: 298ac18dfa3b5f19381ac8e0e6a91c91e3d4f1e4 (2018-02-26)
#
# BINARY BEGIN
_binary_offsets = (258, 426, 594, 762, 930, 1098, 1266, 1434)
_binary = (
    b'\xfd\x37\x7a\x58\x5a\x00\x00\x04\xe6\xd6\xb4\x46\x02\x00\x21\x01\x16\x00\x00\x00\x74\x2f\xe5\xa3\xe0\x63\xed\x35'
    b'\x56\x5d\x00\x06\x25\xe4\x97\x43\xd1\x16\x0d\x13\xec\x05\x8d\x12\x5f\x57\x30\x1b\xfe\xe2\xce\x4b\xb7\x41\xf3\x69'
    b'\x97\x87\xc0\x52\x01\x2e\x35\xb0\x92\xe4\x64\x36\x45\xaf\x53\xe1\xd1\xf2\xf8\x42\xa2\x69\x03\x84\x3e\x88\xbf\x07'
    b'\x35\xaf\x97\xfa\xd9\xe0\x45\x9f\x0f\xc2\x5a\x03\x0d\xa6\xa4\xa9\x4e\x73\x1f\x77\xaa\xc8\xa4\xdc\x3b\x45\xb2\x3d'
    b'\x95\x3a\xc7\xc3\x1a\x26\x50\x51\x16\x61\xdf\xcd\xb7\x33\xf9\xe2\x6e\x8a\xee\x46\xe6\x39\x82\xef\xf3\x0e\x2f\x76'
    b'\x6d\xf8\x13\x01\x5d\x2b\xf2\x74\xc6\x34\xc2\xbc\x16\x6e\x37\xad\x85\xbb\xd1\x61\x67\x04\x3c\x8d\x15\xa7\x78\xb6'
    b'\x31\x0e\xc1\xe9\x60\xa3\x12\xb7\xf8\x11\x6f\xc7\xed\x5b\xc0\xdc\x10\xff\x83\xab\x58\x1a\xb0\xa2\x81\x92\xe6\xbf'
    b'\x87\x83\xa8\x70\xa3\x86\xbf\xaf\xfe\xf7\xdd\x87\xba\x76\x5e\xea\x13\xf2\x8b\x03\x6b\x68\x05\xb7\xb7\xb9\x10\x6a'
    b'\x0a\x40\xf7\x9a\x1d\x20\x30\xc4\x0b\xeb\x77\xb9\xb9\x5d\x98\x91\xd4\x2f\x07\xd2\xef\x70\x02\x22\x76\x7e\x1d\x58'
    b'\x6c\x2c\x01\x07\x63\xb4\x0e\x4b\xbe\x34\x18\xcc\x80\x62\xc0\x1f\xcd\xf6\x51\x8c\xdf\xed\xc0\xb2\xf8\xc1\xf7\xe5'
    b'\xc1\x36\x17\x0f\xf9\x38\xc2\x8b\x66\xb0\xe8\x84\x4a\x3d\x0d\x63\x4f\x37\x3e\x37\x19\xfa\x7d\x58\xc5\x50\x46\x96'
    b'\xe6\x46\xbd\xeb\xd7\xed\xe6\xde\xca\x98\x19\xf5\x87\x92\xf7\x45\x59\xaa\x39\xe9\x29\xc3\xd2\x36\x98\x53\x8c\x57'
    b'\xcc\xb9\xce\x4c\x8b\xc6\xdf\x4f\xa3\x54\x0c\xb8\x0c\x1d\xf7\xa5\x30\x14\x90\x5b\x0e\xe2\xbf\xd1\xcc\xbf\xf1\xce'
    b'\x83\x47\x61\x75\x4d\xde\x5b\x9f\x8f\x88\x97\xdc\xde\x9c\x82\x50\x45\x0a\xe9\x81\x83\x6c\x5d\x1f\x76\x97\x8f\xe6'
    b'\x11\x7b\xa1\x5e\xcd\xb6\xa8\x60\x14\xd8\x2c\xaa\xf9\x71\x4a\x3c\x55\xf2\xab\x33\x56\x16\x9a\x6d\x87\x95\x1a\xe0'
    b'\x91\x46\xbb\x3d\x02\x59\x94\xe5\x80\xaa\x3e\x52\x11\xb8\x7d\xc5\x44\xe1\xcd\x74\xac\x05\x24\x39\xee\x5a\x52\xa5'
    b'\x19\xdd\x06\x83\x83\x93\x76\x9b\x88\xc5\x58\xf3\xe2\x6f\x15\xa9\x24\x4e\x25\xd0\x11\x5c\x73\x90\x87\xc1\x09\x73'
    b'\x59\x48\x77\xb4\xf5\xd0\x21\x20\xdf\x11\xa3\xad\x37\x11\xdd\xe0\x3c\xc7\xcc\x2b\x8a\x84\x59\xa0\x63\x1c\xe8\x1f'
    b'\x04\x0b\xc5\x1e\x39\x1d\x0c\xad\x6e\x7f\xce\x79\x22\x3f\x4f\x1b\x64\x18\x71\x1a\xa2\x83\x6e\xb3\x42\xac\x02\x45'
    b'\xd6\xc4\x18\x51\x31\xb1\x5c\xf6\x5f\xe8\x02\xb5\x4c\x50\x87\xdd\x5b\x68\x49\x98\xb9\x96\x6e\x05\x40\x4d\x59\x10'
    b'\x72\x7a\xe3\xb8\x8a\x5d\x79\xce\xb4\x9b\xba\xee\x85\xc8\x07\x80\x18\x35\x56\x4e\x65\xb0\x11\xe8\x3f\xc4\x9c\xce'
    b'\x00\x23\xdc\xc0\xa3\x42\xbf\x19\x6c\x1a\x48\x9b\x3f\xeb\xd9\xda\xca\x71\x43\x15\xb0\xda\xc3\x25\x04\xaa\x38\x34'
    b'\x75\x28\x40\x89\x44\x60\x6c\x2a\xd5\x72\x7e\x9f\x59\x5c\x25\x8e\x10\xd9\xb2\x46\xdc\x38\xa8\x5f\x46\xc1\x5a\x92'
    b'\x5e\xe2\xf0\x22\xbb\x5f\x17\xfa\x8f\x04\x23\x13\x17\x78\x74\x04\x4d\xcc\x6c\xb5\xf7\x01\xcb\xa2\xfe\xcb\x2b\x4f'
    b'\x99\x6d\x6d\x3d\x68\xec\x2f\xbc\xed\xe7\x43\x4a\xf8\x8f\xf4\xf4\xe9\x64\xa6\x36\x0a\xd2\xf7\xe3\xe4\x4b\x07\xfc'
    b'\x98\xc0\x53\xea\x52\x00\x5b\x68\x0d\xba\xf7\xe2\x8b\x28\x23\x5b\x2c\xf2\xc7\x06\x4b\xdd\xd5\x4b\xbd\x12\x46\xcb'
    b'\x81\x1f\x16\x24\xca\x9d\x36\x35\xa1\x43\x3f\x1a\xe6\x7c\xfe\xe7\x18\x08\x95\x8e\xdf\x95\x2e\x8f\xb3\xef\x16\xeb'
    b'\xed\x6b\x38\xcb\xd8\x7d\xc6\x68\x94\xe1\x67\x40\x92\x3f\xab\x8a\x90\x5c\xd6\x9c\xf6\xbf\xd2\x9b\x82\xd1\x89\xa9'
    b'\x16\xb4\x32\x92\x6c\x4f\x3c\xc5\xff\x47\x89\xe1\xf7\xcf\x78\x5c\xc8\xde\xcc\x15\x8c\xfb\x5a\x82\x95\x65\x1b\x33'
    b'\x1a\xcd\xbc\x0b\x2c\xc8\x80\xee\xc4\xc8\x8f\x5a\xbe\x20\x5c\x67\x15\xd9\xe9\x3a\x4e\x24\xe3\x9a\x54\x0f\x5f\x7d'
    b'\xb7\x5f\x03\xe0\x4f\x91\x9f\xc5\x8b\x75\x94\x19\xae\xc9\x71\xd5\x29\x6a\xda\x39\x13\x44\x70\x91\xf1\x34\x72\xf4'
    b'\x69\xb8\x5a\xb1\x0f\xd5\xe3\x9d\x9c\x57\x70\xa6\x49\x04\xe3\x6a\xae\x50\x28\x1a\x6c\x1b\x3e\xee\x0d\xf4\xb5\x2e'
    b'\x02\x90\x76\x88\xb2\x91\x73\x4b\xda\xfe\x0f\x27\x94\x1a\x79\x32\x48\xc8\xf4\x95\xf8\x2f\x81\x90\x14\x1f\x5e\x24'
    b'\x93\x92\x3c\x38\xa3\x54\x3a\xe6\x6e\x23\x7a\xea\x20\xe0\x75\xd5\x60\xc8\xe6\xc4\xd4\x2a\xf7\xf3\x7f\x86\xb0\xf7'
    b'\x7c\xec\x34\x5c\x3f\x28\x06\xfd\x65\xf7\xc4\xeb\x01\x21\xb0\x1e\x44\x38\xda\x4a\xc0\x0f\xb7\x78\xd5\x98\x2f\xe7'
    b'\x9b\x2b\xd7\x9b\x1e\x3e\x53\x4d\x46\x39\x25\x4a\xca\xc5\x1e\x7c\xa7\x4e\xf1\x62\xbb\x9b\xf0\x82\x30\x53\x90\x35'
    b'\x71\x5d\x82\xf2\x05\x60\xc1\x29\x28\xf2\xd4\x40\x88\x6c\x38\xd7\x9a\x73\x21\x76\x0b\xc2\xea\xc2\x86\x98\x69\xba'
    b'\xdc\x92\x57\x08\xd0\x93\x49\x46\x32\xf9\x8a\x5e\xf3\x5f\x2c\x60\xed\xf2\x7b\x29\xf9\xe3\x33\x73\xbf\xc3\x77\x58'
    b'\x27\x24\x22\xb0\xbe\x6e\xcd\x22\xb1\x24\xf7\x56\x7d\x17\xdf\x80\xeb\xda\x21\x1c\x92\x1e\x0d\xd8\x3c\x13\x78\x57'
    b'\xcb\xc6\x4c\xe0\xaf\x17\x5a\x7a\xf8\x17\xc1\xd6\xf8\x41\xec\x68\x2e\x33\xdf\x2e\xc6\x38\x6a\x22\x91\xb5\xae\x71'
    b'\xae\xa0\x3e\x87\x51\x63\x29\xd8\x54\xeb\xd3\x95\x50\xc9\x56\x6c\x51\xaa\x3a\x29\xbd\xb6\xd9\x90\x5c\xe3\x32\x21'
    b'\x9b\x0d\xa5\xf7\x85\x2b\x18\xee\xfb\x99\xc8\xc9\x2b\x61\x31\x5e\xd2\x95\x87\xec\xe7\x02\xc3\xe5\xed\xbe\x83\xc3'
    b'\x54\x37\xa2\xb4\x40\x70\x93\xe6\xa6\xc5\x33\xde\x38\x6e\x60\x9f\x80\xd1\x47\x97\x5c\x33\x03\x4f\x24\x50\x8e\x12'
    b'\xac\x10\x4d\xec\x63\x47\xe4\x2c\xf5\x25\xd8\x77\x37\xf4\x99\x6d\x77\x46\xf3\x43\x34\x3f\x4f\x24\xdb\x6c\x3d\x86'
    b'\x6d\x11\xce\xc1\xd1\x62\x26\xd1\x43\x86\x0a\x7a\xc5\x9a\x32\x34\x70\x9f\xf3\x0a\x13\x5b\xe3\xca\xf1\x64\xa7\x30'
    b'\x21\x23\x0b\xee\xa9\x84\xaf\x41\x44\x4d\x66\x41\x95\xff\x53\x46\xf0\x1e\xbd\x16\x3c\x07\x53\x61\xe1\x51\xd4\xb2'
    b'\xca\x95\x59\xab\xe5\x9d\x98\xbc\x60\xdd\xa4\xf8\x4b\x1c\x54\x9f\x4f\xba\xf4\xfe\x3a\x9b\x89\x26\x65\x31\x90\xf1'
    b'\x6d\xaa\x53\x8c\xbc\x25\x7b\xa6\xa2\xf9\x63\x28\x1b\xb3\xd2\xe1\x12\x94\x85\xc4\x88\xef\xb6\x8c\x39\x3d\xca\x89'
    b'\x87\x7f\x5c\xf7\x6b\x5d\x94\xa0\xb7\x4c\xc6\xca\xc7\xff\xf6\x5d\x80\x96\x85\xa5\x93\xf4\x34\xa6\xd1\x10\x0c\x1b'
    b'\x6e\x84\x4c\x68\xeb\xa9\xa1\x20\x6c\x78\x83\xc1\x12\xf3\xaa\x96\xe0\x08\x5b\xcc\xdf\x15\x8d\x43\x45\x00\x32\xdb'
    b'\x7c\xb9\xf4\x4c\x7b\x62\x26\xc3\x8f\xdc\x23\xbd\x40\xd3\xa3\xeb\xb6\x62\x83\x8b\x54\x80\xd5\x39\xba\x71\xf3\x70'
    b'\x96\xa3\xb9\x86\xc7\xa0\xc8\x85\x08\xb5\x9e\x2c\x1d\x2e\xe7\x72\x47\x41\xcb\xb8\xf1\x21\x0b\xe6\x4b\x4a\xa7\x8b'
    b'\x81\x89\x3a\xd2\x92\x64\xf2\x59\x4a\xef\x03\xec\x95\x43\x88\x9b\xf8\x2c\x4f\xf2\x99\xd9\xa0\xec\xd8\x57\x29\xe1'
    b'\x11\xbb\x2e\xe0\xf0\x68\xa9\x4f\x3c\xda\xec\xae\x25\x5d\x81\xa5\xf3\x13\x9c\x6a\xa4\x90\x89\x09\x62\x85\x82\x84'
    b'\x44\xda\x9f\x41\x1b\x65\x17\xd8\x5c\xed\xd5\x95\xb6\xe8\xcd\x71\x1a\x32\x4e\xd5\x2f\x1a\x76\x53\x5c\x83\x29\x11'
    b'\x8e\x64\xbf\xa3\x3a\xdf\x51\x48\x00\x84\x61\x73\x77\x18\xa3\x1b\xde\xb8\xdf\x68\xb2\x90\xc2\xd6\x6b\x6b\x83\x61'
    b'\x4c\x19\x45\x88\x7a\x28\x48\x51\xce\x8d\x9a\x4e\x8a\xe4\xdb\xdd\xdf\x3a\xc6\x0c\x02\xb3\x36\x92\x00\x5e\xe1\xab'
    b'\x54\x03\xd8\x12\x91\xbd\x6b\x45\x3b\x5e\x8a\xc4\x45\x1f\xcf\x84\x49\x66\x05\x94\x01\x9c\x51\x23\xf0\xeb\xe1\x94'
    b'\x29\xc1\x3d\xdc\x1b\x62\x28\x77\x6b\x3c\x27\x6c\x4a\x9d\x0c\xad\xa3\xa3\xb6\x77\xee\x81\xe5\x3d\xa0\xcc\x92\x55'
    b'\xc7\xc1\x6d\xeb\xee\xac\x63\xd4\x88\x2e\xe4\x12\x9a\xa6\x2c\x1a\x5b\x61\xce\xdb\x0a\x07\xbe\x55\x17\x30\xa3\x98'
    b'\x5a\x4f\x19\xf2\x31\x2a\xaf\x50\xd8\x89\x77\xaa\x6e\xbf\x8d\xf2\x39\xcd\xf5\x4f\xb5\xfe\x70\x2f\x2e\x19\x31\x17'
    b'\xdc\x33\xb4\xc6\xc2\xae\xed\x94\x63\x18\x8a\x0c\xac\x83\x78\xcb\x9f\x9d\xf6\x93\xe4\xb8\xd9\xb9\xd9\x54\x84\xd1'
    b'\xbc\xdc\x2e\xd4\x8b\x69\x9f\x53\x2b\x3b\x61\xec\x2a\x39\xce\xd0\xb3\x5e\xfc\x46\x13\x6b\xab\x1f\x92\xe4\x08\x58'
    b'\x99\xca\x61\x13\x99\x80\x76\x51\xc8\x92\xdb\x13\x40\x6c\x18\xbb\x44\xc4\xec\x7c\x9b\xe2\x1c\x23\x8b\xbc\x3d\x1c'
    b'\x8d\x78\x26\xcc\x60\x33\x36\x81\xb5\xd9\x8e\xaa\x9e\x5b\x2b\x6b\x7c\x2c\x36\xb4\xab\xed\x07\x2a\x2c\x6b\x94\xc5'
    b'\x3b\xc5\x1b\x53\xf2\xa6\xde\xe8\x6e\x43\x89\xed\x52\xfa\x7e\x48\x6b\x26\x7e\x19\xd3\x6e\x12\xca\x46\xa5\x6e\xd3'
    b'\x1c\x43\x03\x9e\x71\x9c\xf8\x6a\xb9\xba\x7b\x81\x91\xba\x8b\x49\xdd\xf9\xcf\x7d\xb4\xda\x16\xad\xcd\x98\xb6\x0a'
    b'\x97\x3f\xea\x03\xb8\x06\x40\xfe\x42\x7c\x25\xde\xe0\x72\xfc\x2f\xe6\x99\x70\xb6\x70\xfb\xaf\xe3\xf4\x18\x0c\x63'
    b'\x97\x22\xbf\x72\xab\x8f\x3b\xe5\x41\x51\x0d\x03\x49\x87\x3e\xeb\xd8\x25\xa5\xc2\xf4\x98\xf9\xd5\x1a\x29\x53\xcf'
    b'\x16\x81\x92\x13\x91\xf0\x73\xdf\x76\x65\x6c\x1b\x0f\xf3\x5f\x00\x4f\x29\xc9\xef\xa5\x78\xf3\xb9\x83\xa6\xae\x58'
    b'\x0d\xb6\x76\xf3\x69\x0a\xe5\xd3\xc6\x1a\x88\x83\x34\xcd\xd1\xc6\xbf\x94\x84\x46\x04\x6a\xfe\x99\x3f\x91\x64\xec'
    b'\x1f\xfd\x7a\x5e\xb3\xb8\x56\xb0\xa3\x36\x44\x9e\x8f\x2d\x4d\x45\xee\x3d\x86\x6f\xb1\xec\xb2\xdb\x1c\x37\x0e\x50'
    b'\x31\xa3\xf0\x21\x03\x04\x4b\x36\xbc\x62\x91\x56\x21\xcd\x1c\xd5\xbe\x9e\x0a\x80\xdd\x3f\x8f\x1a\xff\x75\x60\x7b'
    b'\xb1\xf7\x93\x9a\xed\xca\xdc\x77\x9a\x6b\x67\x28\x5b\x75\x26\xc9\x2b\x91\x05\xbd\x75\xec\xcc\xcd\x35\x2e\xd2\xa4'
    b'\x18\xa1\xc3\x40\x80\xb9\x80\x32\xee\x6c\x66\x8f\xd5\xb0\x5d\xcc\xd6\xd3\xdd\xf6\x2e\xcb\xf7\xd5\x10\xf2\xcd\x2a'
    b'\x90\xe7\xf0\x8b\x37\x48\x43\x5a\xbe\xbb\x57\x99\xd8\x60\x05\x11\x69\xfd\xa5\x08\x97\x35\xaa\xa0\x64\x31\xd7\x72'
    b'\x48\xd5\x8a\xb8\xc6\x52\x94\x96\xb0\x59\x8b\x18\xf5\xed\xd1\x53\x7e\x12\x09\x39\x05\x53\x29\x88\xc0\x4f\xd4\x00'
    b'\xe2\xdf\xb8\xb3\x3a\x3d\xf2\xf9\xed\x91\xe6\x17\xf1\x6f\x2a\xec\x57\xbf\x5c\xd5\x87\x41\x36\x64\x67\x42\xec\xb3'
    b'\x4d\xbe\x46\xe7\x70\xac\xf2\x8b\x5e\x99\xd6\x21\x92\xe2\xbc\xf8\xf8\xdf\xc7\xce\xb9\xee\xf8\x59\x32\xa4\x4d\xe3'
    b'\x64\x93\x6e\xab\x38\x90\x02\x25\x9c\x8f\x98\x75\xc9\x94\x51\x24\x88\x03\xbc\xdb\xcc\x48\x03\x7e\x76\x77\xfc\x55'
    b'\x15\x5c\xce\xf7\xfa\x54\xfa\xe4\x9c\x5d\x15\x54\xea\xa2\x86\xdd\x13\xdc\x1a\x57\xc9\x82\xf8\xb6\x76\x3b\x54\x08'
    b'\x34\xf5\xec\x45\x18\x01\xeb\xfe\x64\xa3\x77\x38\x2e\xb3\x99\x92\x15\xb5\x56\x78\xfc\x9c\x14\xf6\xc2\xa1\x3e\x44'
    b'\x03\xd6\xd9\xce\x1e\x8b\xee\x0c\x38\x17\x28\x51\x2d\xf1\x54\x16\x6a\xe2\xaf\x53\x9a\x97\xb7\xbe\xa4\x3f\x11\xda'
    b'\x21\xf2\x30\x38\xe5\xcd\x31\x0f\x88\x25\xcb\x30\xc5\xe3\x06\xdb\xc1\x99\xe1\x65\x5b\x8c\x61\x0b\xca\xe1\x2f\x79'
    b'\xd5\xb8\xa5\x38\xeb\xad\x97\x61\x87\x10\xfb\xeb\xd0\x2d\x8d\xb9\xfd\x48\xe6\x0e\x8e\x42\x34\xa3\xb9\x5a\x5f\x59'
    b'\x62\x28\x5c\x41\xaa\xb8\xb4\x6c\x57\xd7\xf5\x5e\xe6\xd6\x3d\x6c\x83\xb4\x1a\xff\xf8\x76\x4b\xcd\x7c\x3f\x0b\xae'
    b'\x73\x65\x90\xbb\x55\x2c\x4a\x44\x94\x91\x7c\x55\xe1\x99\x2a\x74\x97\x08\xcd\x76\xc0\x75\x5a\x06\xbf\xfc\xc1\xa5'
    b'\x5e\x1b\xf2\x08\xb2\x99\x67\xf4\x61\x58\x25\xd8\xbc\x74\x0d\xec\xef\xc3\xd3\xd3\xa1\xf2\xe9\xfb\x88\x1f\xe8\x1f'
    b'\xf1\x15\x10\xa5\x2e\xd0\x4d\x26\x7a\x5a\x87\x71\x5f\x13\x86\x00\xc0\x2e\xb6\xe7\x2c\x76\x38\x21\x48\xe0\xe3\x9d'
    b'\x84\x27\xb0\x0f\x0f\xa9\x9b\x12\xd1\xcb\xb0\xe0\x77\x45\xc2\xc0\x56\x16\x88\x46\x09\x49\xd2\xb7\x8e\x77\x08\xb7'
    b'\xdd\xd1\x89\x7c\xce\xc6\xc8\xb5\x97\x83\xba\xc8\x5b\x93\x6a\xf2\x11\x81\xe1\x58\xd6\xad\x3c\xd4\x2e\x58\xf7\x4f'
    b'\x3f\xfb\xd6\xaa\xf4\x0c\x53\x64\xeb\x09\xaa\xac\x58\xdd\x01\xcc\x92\xff\x8e\xc8\xab\xec\x93\xeb\x6a\x95\x8e\xe6'
    b'\x2f\x33\x21\xfd\x1d\xcb\x0b\x26\xf7\xe8\xa1\xf1\xfa\x40\x8a\xa0\xb2\x39\x80\x4b\xa3\x82\x30\x95\x5c\x54\x4b\x37'
    b'\xb1\x88\x4b\x2d\x2b\xa9\xee\x9f\x02\x69\x96\x71\x8c\x60\x06\xf5\x3b\x10\x64\xeb\x39\x1f\x4b\x63\x69\xd0\xe6\x4f'
    b'\xe6\x6d\x0b\xd4\x4d\x84\xe3\x9b\x5f\xc7\x0b\x00\xf3\xfe\x29\x48\x23\xb7\x3e\x00\x93\x58\xad\xf4\xd7\x16\x9f\x1c'
    b'\x18\x46\x04\x4b\xa2\xd6\xe8\x9b\x61\x19\x14\x80\x91\x7d\x3a\xd3\xfd\x38\xab\xd3\x6c\x6b\x5b\x3b\x3c\xf5\xd3\xf7'
    b'\xbe\x14\x93\x45\x2d\x5e\xde\x5d\xca\x21\x72\x8a\x0d\x81\xf7\xb7\x13\x2a\x1a\x11\xb0\xe9\xfa\xc3\x0e\x8d\x4e\xf2'
    b'\xc2\xd5\x34\xa8\xe6\x83\xf7\x93\xcf\xc7\x85\x1b\x2f\x7a\x7f\x25\x30\x20\x62\x44\x89\xb1\xee\x1e\x1a\xe7\x91\xe6'
    b'\x34\xf9\x7d\xb0\xc1\x66\xe4\x54\xbb\xf4\x84\xd1\x15\x98\xdf\x10\xba\xc3\x03\x9b\x6b\x9c\xf4\xe0\x1f\x52\x44\x71'
    b'\x0a\x55\x4b\x29\x93\xbc\xfe\xf0\x1f\x2d\xa2\x1e\xe3\x01\x5b\xf1\x56\x51\x02\x65\xd7\x95\xc5\x65\x03\x3d\xc7\x30'
    b'\x4b\xc0\x06\xaf\x46\xa9\x20\x74\x80\xc0\x46\x0d\x22\xc2\x77\xf4\x61\x12\x3e\x9a\x46\xb7\x30\x8e\xd6\xdd\xae\x20'
    b'\x26\x1b\x4f\xb3\x5a\xcf\x71\xe8\x54\x0f\x29\x86\x95\x3e\x34\xa4\x2a\x51\xb6\x48\xa1\x30\x4f\x7d\x96\x7d\xe8\x7b'
    b'\x6f\xf1\xc1\x6d\xd6\x0e\x0c\x12\x97\x47\x5f\xdd\xed\x5e\xd7\x53\x5d\x40\x23\x55\x81\x14\x8e\xe5\x39\x47\x9b\x48'
    b'\xf5\x49\x24\xf1\x48\xd5\xaf\xe0\x5e\x83\xe7\xa5\x95\xbb\x34\x37\xf9\x95\xfa\xd0\x67\x22\xc8\xfe\xc0\xc4\x1f\xa6'
    b'\x13\x22\xaa\x83\x5e\xfc\x66\xe1\xbf\xd6\x0f\x14\xba\x50\x93\xac\x85\x11\xf4\xf6\x3a\x7d\xbc\x18\x0d\x2a\x7d\x9a'
    b'\xba\x23\x59\xcf\x87\x28\xfa\x2d\x15\xab\x2a\x8b\x4e\x66\x49\xa9\x3c\xa0\xd9\x0b\xea\x9d\xfc\xb1\x40\x5b\xe9\xdc'
    b'\x89\x6d\x09\x9a\x8e\xe0\xde\xad\x05\xf9\x0b\x57\x82\x57\xc3\xe0\x44\x93\x2e\xa0\x6e\x08\x20\x44\xb7\xbd\x2b\x73'
    b'\xba\xe4\x09\x9a\x8c\xe6\x09\x28\xee\x09\x2d\x03\x8d\xed\xef\xc1\x76\x7c\x41\x1d\xd5\xce\x5f\x56\x4a\xa9\xcc\x68'
    b'\x27\xb3\x52\xf7\xd9\x0c\xca\x9e\xeb\x36\xee\x70\xd9\x32\x9c\x9e\xa6\xdf\xfd\x66\xaf\x25\xe2\x6b\x57\x3f\x50\xfd'
    b'\x36\x1d\x16\x71\xd3\xd6\x4e\xd4\x42\x90\xc2\x8a\x3c\x34\x9b\xf5\x12\xc4\x4f\xa2\x30\xb0\x33\x6b\xbb\xe4\xaa\x5c'
    b'\x01\x3d\x03\x31\x84\x21\xc9\xee\xf2\x57\xf2\xb0\x25\x5d\x68\x52\xa7\x43\x45\xc4\x4d\x67\xc5\xec\x7c\x63\x30\xa0'
    b'\x57\x35\x90\x96\x42\x73\x52\x97\x72\x30\xd1\x7c\x6f\xe1\xa7\x83\x0a\xfe\x33\x9f\x27\x51\x61\xff\x29\x35\x6a\xcc'
    b'\xeb\xda\xfc\xde\x6b\xf3\xfc\xf4\x9e\xe3\x0c\xf2\xe0\x13\xe4\x4a\xee\xb6\x1b\x1f\x16\x67\x2e\x5a\x7a\xf6\xac\xcd'
    b'\x5b\x22\x3c\x9d\xab\x00\x23\xe1\x3c\x9e\xfa\xdd\x2c\xb2\x80\xb0\x48\xb6\x79\xa9\x5e\xab\xe2\x8d\x49\x84\x43\x44'
    b'\x02\xa4\x8a\x14\x6a\x58\xf1\x89\xb0\x6d\x26\xc1\xc6\x78\xf4\x06\x91\x03\xa9\x41\x86\xbf\x15\xb7\xcb\x55\x6f\x1c'
    b'\xd4\x4d\xd4\x5b\x06\x60\xb9\xf3\x2b\xf1\xb3\x85\x84\x1d\x5f\xd9\x18\x73\xc5\x24\x0a\x3e\x1e\xb2\x61\x36\x3f\xbc'
    b'\x9e\x9b\x55\x11\xae\xa4\x58\xa8\xf0\x6a\x08\x9d\x4d\x62\x75\x14\x35\x7b\x5f\x38\xb6\x3f\xaf\xc5\xde\xf3\xf6\xab'
    b'\xf4\x01\x97\xdb\x24\x38\xc8\x0a\xa0\xe2\x74\x21\x21\xfb\x0a\x55\x9a\x3a\x50\x69\x62\x9c\x41\x83\x21\xc3\x73\x62'
    b'\x61\xef\x81\x88\xeb\x98\x4c\xb5\x27\xaf\x0b\x73\x55\x6b\xe1\x0f\x1e\x18\xc1\x9a\x0d\x67\xf7\xb5\xba\xe9\x63\x72'
    b'\x39\xd7\x55\x38\x00\xf1\x03\xe0\x42\x07\x63\xa0\x0d\xea\x86\x5c\x48\x05\xdc\x6a\xbe\xfc\x87\x07\x58\x86\xde\xa4'
    b'\x04\x58\x80\xd8\xdc\xbc\xa8\x2a\x7c\x26\x9e\x0c\xa5\xa4\xbc\x3b\x83\xfd\xad\x57\x42\xba\xc6\x07\xe0\xc4\x3a\x25'
    b'\x7b\xe1\xee\xef\x58\xfc\x65\x29\xa4\x02\x33\xd3\x8c\xa8\x30\xb1\x25\x8e\x65\x3b\x32\xb8\xf5\xee\x5c\xac\x2d\x72'
    b'\x31\x7e\x6f\x6b\x9d\xa3\x06\xdf\x3a\x66\xd8\x5e\xcd\x60\x17\xef\x5b\xca\xcd\x00\xdd\xa5\x69\x2d\x93\x90\xc9\xf7'
    b'\xb7\xa7\x8c\x5f\x45\x3f\xce\x15\x40\xd8\x7d\x84\x9b\x12\x32\xff\xb8\x02\xc3\x50\xeb\x26\x5c\x64\xad\x17\x01\x85'
    b'\x3b\x27\x22\xf7\x9c\xc8\x6e\x4d\x11\x3e\xdf\x04\xb4\x67\x60\x2d\x58\x39\xea\xf8\x86\x5b\x82\x4b\x88\xf2\x05\x11'
    b'\x25\x2d\xe8\xe2\xc3\x2f\x28\x2a\xb1\x8f\xbc\x56\xee\x2a\x47\xf2\x42\x78\xf3\x4e\xa3\x38\x73\x14\x3f\xc0\x32\x3e'
    b'\x0f\xd9\x32\xca\x6e\x5d\x51\x3f\x2e\x30\x04\xd3\xca\xdc\x48\xe5\x50\x6c\xa8\x5b\x59\x59\xda\x82\x0f\x19\x52\xf7'
    b'\xb2\x0b\xe7\x6e\x2c\x76\xca\xc1\x0e\x1d\x01\x8f\x06\xa1\x86\x48\x1b\xb7\xc9\x3b\x22\xaf\x56\x3b\xab\x05\xa5\xbd'
    b'\x9b\x5e\x3f\xed\xd2\xfc\x9e\x66\x45\x9a\xa7\x19\x87\xc9\x83\xe4\x2b\x57\xe4\xa8\xa9\xe3\xc3\xb3\x3c\x87\x54\xb7'
    b'\x47\x4e\xc4\x88\x1f\xeb\x29\x81\x64\xee\x23\x65\xcb\x82\x68\xe0\x00\xab\x76\x25\x4a\xe8\x07\x08\xbf\x35\xb8\xf8'
    b'\xef\x79\x8d\xbd\xb3\x3e\xa3\x6e\xeb\x11\xdc\xca\x56\x9e\xf8\xc5\xdd\x6e\xfb\x73\xbc\x00\x67\xa3\x95\x96\x84\x22'
    b'\x7d\x9d\xeb\x5e\x5a\xca\xc5\x58\x5a\x49\xf5\x58\x75\x19\xe7\xe4\xed\xad\x37\x2b\xac\x20\xaf\xa2\x9e\xab\x50\x54'
    b'\x1f\xdc\x59\x8d\x2b\x24\x05\x8e\xc8\xb5\x66\x0a\xd9\xeb\xf2\xe7\xd0\xd1\x79\x1f\xdb\x09\xe1\x79\xa3\xcd\x4f\x8d'
    b'\x80\x6e\x7e\x22\xd1\xd9\x8d\x9f\x84\x8e\x0c\xb6\xf0\x47\x3f\x98\x4d\x44\x31\xaf\x68\x09\x81\x19\x62\x4b\x5a\xaf'
    b'\x23\xb8\x8d\x3f\x6b\xaa\x3f\x9c\xc8\xdb\x57\xc7\x7f\x75\xb3\x01\x91\xf4\x91\x84\x51\xc1\xa0\xdc\xc1\xcf\x79\x99'
    b'\xd0\x8d\xcc\xe1\xf3\xbc\xe3\xf4\x63\x7b\xc9\x3f\x36\x6f\x54\xc5\xee\x5b\x4e\xd5\x0d\xab\xeb\xf5\x85\x09\x17\x34'
    b'\x9c\xa8\x67\xa4\x2b\x5d\x89\x2b\x83\xb2\x12\x5b\x16\x46\x1a\x10\x41\xb4\x02\x5a\xc3\x17\x4b\x7a\xe2\xf7\x63\x76'
    b'\x51\x17\x3e\x86\x94\xaf\x90\xcb\x36\xa1\x59\xa7\xda\xea\xe3\xb6\x1b\xc6\xca\x7a\x22\xff\xea\x4d\xe5\x0c\x04\xfc'
    b'\x83\x06\xf2\x46\x3e\x69\xf8\xce\xc3\x3d\x7f\x02\x97\x11\x52\x4c\xef\xeb\xfa\xce\xf4\x78\x52\xee\xe2\x74\xf0\x6a'
    b'\x99\xc3\xee\x10\xff\xe3\x6c\x95\xc7\x63\x6b\x2a\x3b\xd7\xb3\xd4\x46\x83\x2b\x11\x8b\xa2\x76\x40\xff\x74\xd4\x05'
    b'\x2d\xa2\xe3\x49\x77\x12\xc1\x06\xb8\xad\x2a\x2a\x1b\x84\x69\xb1\x4c\x07\x12\xc0\xd6\x6f\x23\x6f\x40\xbd\x2c\xe5'
    b'\xe7\xed\x93\x88\x3f\x8f\x2d\xd1\xbc\xb9\xa5\x3d\x41\x71\x59\xd9\x2f\x60\x33\x92\x88\xda\x7b\xd3\xc4\xa8\x2c\x64'
    b'\x72\x3d\x1e\x8a\xac\x3f\x01\x8f\xc0\x4b\x9d\x82\x87\xa1\x18\x22\xba\xd5\x1f\xaf\x0f\x4a\x0d\xea\x0a\x95\xd0\xbc'
    b'\xd2\x2c\x23\x82\x88\x07\x64\x14\xa3\xec\x49\x77\xf0\xec\xd4\x23\x3e\x56\x8a\xaf\xe1\x73\x7c\x8d\x8f\xa7\x40\x1a'
    b'\xe9\x3f\xf3\x5c\x2c\x92\x45\x41\xe6\xfd\xf5\x26\x6b\xf1\xed\x0a\xa2\xe7\x0a\x0f\xed\x5c\x89\xc5\x6d\x0d\x67\xd5'
    b'\xc7\xa6\xd9\xc8\xc1\x06\xd9\xe5\xc7\x28\x20\x70\xa3\xc0\xbb\x7b\x8c\xa5\xa5\xc5\x7a\xa1\x2d\x8b\x5c\xf1\x20\xdb'
    b'\xdc\xfa\xc8\x9c\x03\xbc\xd8\x81\xa3\xae\xd7\x26\xf2\x4e\x51\x84\x14\x7e\xd6\xb9\x55\x61\x63\x6c\x1d\xa0\x5d\x94'
    b'\x85\x45\x51\xc7\x31\xac\xd4\xfa\xbb\xaa\x7b\x7f\xdb\x36\x29\x1a\x09\x83\xaa\xdf\x83\x5d\xae\xdb\xae\xfe\x75\x6f'
    b'\xcc\xb6\xb5\xd8\xb3\xa2\x92\xc0\x4a\xfe\xab\xab\x59\xd6\x9a\x74\x02\xe2\x80\x7c\x4e\x01\x49\x9c\xea\xf4\x05\x1f'
    b'\x15\x41\x02\x1c\x00\xbc\x6c\xc5\x73\x82\xbf\x24\x0a\xc3\xd0\xd7\x03\xc8\x96\xc6\x75\x74\xa9\xae\xca\xbf\x69\x9e'
    b'\x77\x7b\x9d\xa7\x5f\x35\x68\x42\x09\x3d\xd1\xcf\x3b\xaa\x0b\xa1\xfa\x7c\x34\xd6\x52\x07\x4b\x5a\x43\xe8\xa2\x19'
    b'\x30\x0e\x14\xe2\x43\x43\x41\x4d\x28\xa8\x2c\x19\x66\x22\x64\x67\x48\xa3\x7d\x88\xd5\xa3\xde\x6a\x9d\x6f\x90\x2f'
    b'\x06\x21\x3b\xea\x67\xee\x9c\x2d\x95\x07\x51\x53\x26\x03\x38\x89\x03\x84\x8c\xce\x48\x2c\xaf\xd9\x3a\x29\x35\x8c'
    b'\x88\x08\xd3\xd2\x10\x04\xb4\x77\x16\x42\x10\xb0\x46\x03\x63\x21\x54\xb1\xcd\x03\x00\x6a\xe0\x1b\xff\xd5\xe5\x30'
    b'\xb9\xe7\xbc\x85\x05\x05\xa3\x15\x2d\x16\xae\x5b\xa7\x59\xc6\x1a\x0b\xc5\x2c\x77\xf0\x8e\x7c\xe8\x56\x2d\x9c\x03'
    b'\x05\xc1\xf4\x2e\xfd\x9e\x67\xa1\x0d\x35\x16\xbc\x75\x25\x7d\x84\x83\xfc\xba\x6a\xa1\x0b\xa7\xb1\xb6\xaf\xa0\x82'
    b'\x91\x8a\x72\xec\xf3\x50\x71\x9b\x80\x36\x53\x0c\x61\xbc\x24\x60\xf7\x74\xa7\xb0\xd3\xc9\x3e\xd3\x03\x92\x96\xa1'
    b'\xc6\x3c\x42\x0e\xeb\x98\xb4\x8c\x05\x6d\x1c\x3f\xaf\xee\x41\xe9\xbe\x3c\x2a\xaa\x32\x20\x20\x3e\x80\x2a\x2c\x49'
    b'\xb4\xda\x93\xb7\x5f\x4c\xc8\xa0\x57\x5a\x26\xeb\x2c\x49\x29\x01\x96\xa4\x35\x7b\x4c\x18\xbb\x5d\x06\x2c\x59\x6e'
    b'\x15\xda\x9a\x75\x94\x65\xae\x76\x59\xd9\x36\x22\x1e\xb0\xaa\x18\xa5\x23\x1e\x2c\x6e\xc8\x79\x8f\x6f\x04\xda\xe0'
    b'\xad\xc1\x58\xf5\xd9\xc9\x45\xc0\xfc\xf8\x0b\x54\x2d\xce\xeb\xc9\xea\xf5\x80\x19\x3a\xa1\xc4\xb1\x6c\xd8\xc1\x67'
    b'\x28\x4a\x71\x5d\xe6\x9c\xcd\xa5\x09\x37\x56\x18\x44\xf5\xf6\x0d\x2f\x8a\x57\x87\xd4\x04\x14\x42\x48\x90\xa4\x38'
    b'\x4c\xe5\xb2\xcf\xce\x19\x86\xe2\xdc\x92\x5f\xb2\x5c\xda\xef\x1b\xd4\x4d\xc9\x10\x4e\x15\xff\xc2\x38\xbf\x5d\xb0'
    b'\x23\x09\xff\x08\x12\xc1\x5d\x29\x7a\xf0\x98\xab\x28\x06\x85\x4b\x4d\xb8\xb4\x53\xa9\xf9\xc2\x24\x8f\x42\x72\x84'
    b'\x85\xf6\xb4\xa2\x7e\x7f\x72\x8b\xec\xe2\xc3\xe1\x78\x5b\xd2\x86\x16\x9c\xda\x67\x4e\xb1\xe3\x1a\x91\x36\xeb\x81'
    b'\x09\xd0\x6d\x77\x0a\x16\xca\x53\xf7\x2e\xcf\x51\xe8\x31\x8d\x51\x01\x92\xa5\x84\xd1\x5f\x9c\xdf\x6a\xf4\xcb\xb2'
    b'\xb6\xf0\xdd\xcf\x5f\x40\xa2\xbf\x68\xe3\x21\xf9\x81\x5e\x11\x7c\xa5\x7f\xf6\x21\xd4\x49\x5e\xbc\xa9\xea\xc5\x27'
    b'\x53\x8f\xb1\x36\x13\x23\x6d\x17\x2e\x9d\xa5\x8b\x49\xcf\xa4\x23\x35\x4e\x2b\x2c\xf6\x05\xd6\x5b\x05\xe5\xc3\x51'
    b'\xf8\x7a\xd3\x43\xaf\xf1\x40\x20\xdf\x71\xad\x6c\x84\x7d\xaf\x5a\xa1\xf8\xa0\x74\x9d\xfe\x85\xb4\x15\x59\x86\x68'
    b'\xd2\x7b\x5a\x0e\x88\x44\xd0\xfc\xe3\xa4\x2e\xa5\xd1\x5c\x84\x8d\x6c\x16\x75\xdb\xb4\xdd\x12\x49\xbb\xe6\x18\x46'
    b'\xee\x21\xed\x70\xbb\x38\x30\x52\x33\x1e\x17\x52\x3c\x98\xc0\x2f\xe5\x97\xe6\xd1\x0c\xa8\xb8\xd9\xb7\xdb\x23\x56'
    b'\x67\x80\x41\xe0\x80\x59\x01\xc7\xb8\x14\xa5\xd1\x01\xee\x79\x0a\x5b\xf5\x38\x64\x60\x5a\xe2\xc4\x6a\xf0\xb9\xd5'
    b'\x96\xde\x67\x3c\x31\x3f\x2f\x91\xa6\x20\x17\xd3\x9f\x44\xc7\xf6\x9f\x04\xe6\x11\x17\x06\xeb\xa7\x0a\x8f\xeb\x14'
    b'\xa5\xb8\xf7\xb1\x56\xe0\x74\x0c\x4d\x39\x20\xa7\xcb\x5d\xe3\x68\x7d\x4e\xbb\x08\xda\x6d\x75\x58\xaa\x0b\x83\x3a'
    b'\x1b\x82\x1a\xf3\x22\xde\xfd\x3e\xc7\xf5\x93\x03\x44\x61\x8e\xeb\xf6\xe4\xd4\x31\xc9\x5b\x8f\x49\xbb\xbb\x1a\x14'
    b'\x10\x27\x62\x9d\x64\x25\x4b\x42\x22\x94\x2e\x0f\x4f\x3e\x08\xbf\x9a\x0f\x1a\xec\xa2\x35\x12\xf0\x50\xfc\x62\xb0'
    b'\xa3\xb1\x98\xad\xb5\x09\xbe\x16\x00\xc1\xc6\x0f\x85\xe0\x5b\xc8\xa8\x3d\x15\x4e\xf8\xe3\x50\x74\xca\xa7\x9e\x4c'
    b'\x29\xbb\xf0\x57\x2d\x50\x12\x8c\x01\x01\x98\x58\x17\x4e\xa8\xb8\xc0\x15\x1b\xff\x75\xc6\xe8\x77\x79\x83\x70\x98'
    b'\x53\xdd\xa2\xaf\x32\xb7\x9b\xac\x76\x74\x0a\x2b\x72\x89\x5a\xeb\x17\xef\x96\xf3\x44\xf6\xaf\xdf\xb0\xee\x37\x02'
    b'\x74\xa7\x4c\x51\xfe\x9a\x33\xb5\x5e\x94\xbf\xf9\x2c\xa0\x3e\x1e\xc6\x14\x35\xe5\xd2\x35\x64\xb7\x09\x41\x4c\x94'
    b'\xfd\x4e\xa9\x30\xda\xbf\xd6\x3e\x17\x80\x85\x08\x36\x29\x65\x97\x2f\x36\x5d\xe8\x52\x27\xff\x60\xf8\x52\xa1\x43'
    b'\x92\xb3\x28\x80\xdd\xe1\xf4\x1c\x59\x14\x21\x06\x5f\xf5\x92\x85\x4e\xb8\xc5\x01\x24\x41\x43\x3b\x4d\x74\x50\x94'
    b'\xbd\x5b\x57\xdb\xa3\xa0\x31\x33\xe6\x7a\x7f\xc1\x78\x55\x63\x18\x24\x12\x25\x03\xd2\x37\x0e\x37\xe5\x63\x09\xc3'
    b'\x8f\x3b\x1e\x66\xf3\xe1\x5e\x38\x26\x76\x74\xd6\x61\x68\xe3\x54\xd6\xc3\x2d\x96\xf3\xe5\x27\x1d\xda\x40\x5d\xc5'
    b'\xc5\x98\x8a\xb3\x4d\xa7\x6a\xf8\x8e\xe4\x62\x5e\xff\xe4\x62\x5b\x1e\x3c\xaf\x7c\x68\x73\x3c\xdd\xd6\x59\x88\xb7'
    b'\x88\xa2\x8b\x75\x0b\x15\x68\x68\xfe\x6e\xca\x80\x66\x69\x14\x7e\xbe\xf2\xc8\x79\xcb\xf6\xfc\xe4\x5c\xd5\xfb\x3c'
    b'\x58\x0b\x28\x07\x00\xac\x99\x23\x6a\x17\x4a\xd3\x59\xcc\xd5\xcf\xf4\xda\xd5\xbc\xde\x08\xb6\x11\x9b\x52\x1e\x27'
    b'\x71\x3f\x9b\x29\x9d\x69\x3e\x0a\x0d\xd2\x2a\x23\xe4\x76\xac\x9d\xa3\x45\xe7\xf9\x69\xe2\xfc\xd7\xe3\x5f\x39\xd6'
    b'\x95\x6f\xf7\x37\xd9\xf1\x0d\x34\xbb\x58\xe8\x4a\x7a\xc6\x3c\x04\xa0\x09\xdb\xf2\x44\xcd\xf2\x3c\x14\x5d\xd6\xa6'
    b'\xe5\x1c\x4a\xf7\x07\x04\xe7\x46\x12\x66\xc4\x9c\xe0\x94\xfb\x95\x5e\x4f\x14\xac\xe1\xa3\xfe\x96\x5b\x3a\x21\xb2'
    b'\xcf\x64\x4e\x69\xf5\x91\xbf\x79\x53\x44\x73\x12\x8e\xf2\x5c\x07\x49\xde\x99\xbd\xce\x58\x1c\x64\x4c\xbc\xc5\xd3'
    b'\x38\x5d\xaf\xd4\x56\xcd\xf6\x05\x9d\x1e\xa7\xd2\x33\x79\x34\xc8\x1a\x05\x86\x07\x4f\x86\x79\x71\x05\xfd\xe4\x21'
    b'\xad\xa9\x84\xa3\x42\xc5\xe3\x26\x02\x30\xc9\xa6\x6e\x3d\xc2\xb0\xe5\x27\xff\xf3\x63\xb6\x8b\xb5\x19\x80\xf3\xf7'
    b'\xae\xe0\x7f\x43\xdf\x9a\xe8\x49\x0e\xae\x3a\x86\xa0\xdb\xbb\x69\x48\x1c\x6c\xaf\x53\x38\x53\x43\xc0\x48\x25\x3b'
    b'\x8f\x84\xde\xa1\xe9\x94\x67\x76\x11\xcf\xf1\x2a\xc1\x3b\x25\x20\x7c\x87\xaf\x22\x27\x59\x58\x21\x76\xf4\x53\xa6'
    b'\x4e\xa0\xb5\x48\x6a\xf1\xa6\x44\x38\xab\x7e\x93\x49\x85\x72\x2c\xff\xc3\x10\xde\x40\xa5\xd7\x0b\x9e\x6c\x95\x91'
    b'\x58\x50\xd9\x18\x54\xa6\x5e\xcf\x59\x87\x35\x1c\x26\xd9\x0d\x76\x6b\xd1\xaa\x41\xf3\x11\xf2\xb3\xae\x34\xb5\x4a'
    b'\x98\x33\x6b\xa1\x61\x5c\xaa\x38\xd9\xec\x51\xde\x67\x77\x24\xcc\x17\xb0\x9e\xf3\x99\x17\xe2\x9c\x7c\xbc\xe1\xb3'
    b'\xd5\xf1\xec\x21\x5d\x0e\x49\x6f\xec\x7a\xbe\x75\x5f\xe0\xdf\x99\x7d\xfd\x21\x1b\xdb\xc3\xfe\x76\x46\x20\xec\xff'
    b'\x6b\xf3\x6f\x5e\x30\x7b\x15\xa2\x7d\x19\xa7\xc8\xa3\xb6\x1c\x40\xfe\xb7\x73\x06\x05\x51\xd3\x7f\xea\x91\xa6\x45'
    b'\x8b\x9f\x27\x6b\xc4\xa6\xd3\x03\x1a\xe9\xe6\x27\xee\xb3\xf3\x1b\x6d\x61\x95\x18\xb9\x72\x3c\x7c\xfc\x92\xb2\x03'
    b'\xd6\x55\x28\xb4\x14\x9f\xb3\x6b\x78\x41\x78\x3e\x49\x93\x1a\xae\x66\x78\x8d\x69\x0e\xa1\xc6\x7d\x6f\x19\xef\x7a'
    b'\x73\x78\x08\xf4\x3b\x48\x19\x7f\xe6\x6b\x7c\x7c\x11\x8f\xa3\x84\xf8\x74\xb1\xb1\x62\xcb\x7f\x94\x66\x32\xd3\xde'
    b'\x61\x8d\x28\x21\x48\xb1\xee\x1a\x2e\x1f\x22\xe9\x22\x27\xfc\xb8\x1d\xbe\x88\x49\x6b\x4d\xe2\x65\x51\x93\x31\x4b'
    b'\x5e\xdb\x99\xdc\x36\x62\x74\xb4\xe8\x72\x66\xec\xc0\x97\x9e\xaa\x3b\x2f\x13\xf9\x6c\x4e\xb1\x1a\x88\x1b\xf5\x17'
    b'\x3e\x79\xfd\xb8\x48\xce\x7f\x8b\x67\x1f\x13\xaa\xeb\xb4\xe1\xe9\x82\xe0\xc7\xf3\x47\xb7\x0c\x0d\xd5\x74\x19\x18'
    b'\x90\xb3\x21\x60\x4f\x94\x81\x29\x7b\x29\x9d\xe7\xa1\xab\xf5\x89\x16\x3d\x7e\xe6\x8a\x28\xbe\x8a\xd5\xe8\x2f\x43'
    b'\x8e\x5c\x7e\x7e\x53\x14\x16\x4f\xf6\x82\x57\xb2\xd9\x4f\x1d\x3f\xdc\xc1\xee\x48\x6a\x17\x12\x2f\xaa\xce\xf0\x4b'
    b'\xa8\x8a\xb4\xaf\x1f\x69\x1f\xfc\xa8\x9c\x8e\x3d\x21\x15\x3c\x56\xdd\x48\xf1\xd2\x5b\x50\x58\xba\x1d\xeb\xcd\x49'
    b'\xe7\x65\xd4\xd6\x4c\x84\x69\x63\xa3\xf9\xe0\x8a\x62\x9e\xe0\x7a\x25\x53\x1a\x77\xfc\x5c\x06\x1e\x88\xbd\x15\xd4'
    b'\x45\xbf\x22\xb9\xfe\xd2\x3c\x75\xdf\xbe\x6d\x3a\x0f\xb3\x4c\xa3\x46\x4b\xe3\xf3\x2f\x53\x52\xbb\xc7\x29\x63\x9f'
    b'\x72\xc4\x44\x7a\xfd\xbc\x8e\x0e\x5e\x3a\xa0\xad\xf8\xb8\xda\x2d\x32\xcf\x25\x14\x77\x70\x08\x33\x86\xd9\xe5\x0b'
    b'\xa5\x47\x29\x4d\x9f\x95\x42\x5a\xaa\x4d\xd8\xf9\xb8\xf3\x47\x3b\x5f\x0f\x5b\x6f\xaa\x06\x4e\x7d\x33\x9b\x67\xa5'
    b'\xbc\x10\x2f\xed\xa8\xd2\x7b\x18\xcb\x8a\x20\xc8\x47\x76\x69\xa2\xcd\x12\x3b\x0d\x02\x4c\x65\xac\x87\x6f\x76\x22'
    b'\x5d\x83\xe9\x1b\x04\x7e\x8e\x96\xc2\x75\x92\x0f\x17\x9d\x1a\x62\x89\xb6\x28\x5c\xc9\x99\xc1\x8e\xdd\xa6\x44\xf9'
    b'\x7f\x37\x1f\x02\x5f\xca\x84\x32\xb9\xef\x96\x86\xfe\x77\x3c\x67\x53\x94\xf8\x54\x37\x6d\x6f\x6c\x64\x85\x41\x2b'
    b'\x10\x34\x72\x27\xec\x07\x58\x08\xc2\x82\xcb\x9a\xc0\x8b\xd7\x42\x7f\x2f\xf2\x85\xed\xfb\x40\x1b\xb2\x8a\x6f\x43'
    b'\x45\x23\xe5\x9a\xf0\xd0\xac\xe2\x75\x38\x14\x37\x43\xb5\xae\xd8\x1b\x64\x1b\x8d\x97\x37\x8f\x47\x36\x14\xfb\xf0'
    b'\x7e\x1f\x51\x90\xa7\x7e\x87\x01\x21\x99\xa4\x08\x5c\xcf\xb6\x6d\xb1\x8d\x7a\x4f\x7d\x28\xf4\xaa\x14\xe2\x00\x12'
    b'\x6b\x9a\x56\x8f\x7c\x51\xc5\xd5\x8d\x13\xe0\x89\x32\x39\xa9\xea\x2a\xf8\xdd\x08\x29\x24\xfd\xce\x8f\x7f\xcb\xc7'
    b'\x47\x06\xf6\x1d\x98\x9a\x93\xdf\x33\x40\x15\x82\x28\x91\x56\x7f\xde\xb3\x0e\x4a\xd3\x5b\xeb\x13\xe3\xed\x54\x09'
    b'\x63\x1e\x5f\xff\x64\x34\x83\xb0\x51\xa4\xa8\x30\x0f\x55\x0b\x23\xfb\xc4\x00\xcb\xa2\xfe\xae\x24\xd3\x21\xfc\x44'
    b'\x52\x84\xe1\x40\x83\x87\x48\x87\x8a\xd3\x5f\x35\xc0\x82\x34\x74\x65\x74\x46\x4f\xcb\x35\x95\x2a\xf0\x89\x01\xeb'
    b'\xda\xaa\xbd\x76\x5c\xde\xd1\xe3\xc7\xd6\x63\x2d\x11\xa9\x70\x17\x3a\x8a\x20\x28\x15\xf7\x88\x74\xad\x91\xd5\x77'
    b'\xa2\xe2\x1f\x49\x20\x6d\x67\xfe\xb0\x4c\x35\x7f\xad\x0c\x21\x68\xc2\xc6\xca\x0a\x0f\xec\x75\x80\x9d\x97\xc5\x1a'
    b'\x30\x9a\xe6\x0c\x0f\xd1\x27\x85\x00\x6a\xa7\xe5\x74\xd5\x06\x92\x66\x94\x7c\x18\x56\x46\x7e\xaf\xbc\x94\x27\x94'
    b'\x5e\x8c\x91\x17\xd5\x7b\xd8\x26\xfe\x07\x72\xf0\x7a\x69\xd0\xa9\x4d\xbd\xc9\x34\xdd\x11\x1f\xa9\xd1\x1a\x8a\xca'
    b'\x91\xbf\x1a\x94\x03\xc3\xe0\x37\xbe\x08\xf6\x47\x90\x9d\x30\xb9\x1f\x54\x99\x37\x1a\x2d\xf9\x11\xde\x65\x87\x2b'
    b'\x9e\x66\xfd\x34\xf3\xd5\x4f\x57\xf3\x05\x98\x6e\x31\xb9\x4d\x1e\x8d\xbe\x3d\x11\xf6\x24\xbb\x86\xde\xb9\x62\xa8'
    b'\x97\xd8\xf5\x07\x52\x1d\xfe\x8f\x96\xff\x27\xe0\x2b\x27\x14\x2b\x22\xbd\x86\x4d\x00\xa9\xbc\x64\x4c\x4a\x21\xe8'
    b'\x14\x4d\x66\xfc\x54\x49\xb8\x3f\x20\x3b\xc0\x9e\xb5\x2f\xbc\x1a\xbd\x11\xea\x36\x35\x5b\x16\x62\x55\xe5\x3d\xdd'
    b'\x29\x5e\x69\x32\x97\x1b\xf7\x01\x8d\x73\x60\xe7\x96\xf4\x47\x11\xdc\xaf\x0e\xb0\xb9\x88\x67\xca\xe1\xc9\xd1\x76'
    b'\x2e\x4d\xc4\xd2\x4e\xe7\xde\xf2\x2e\xa8\x23\xca\x52\x2d\x13\x5d\x7a\x2d\x9e\xcf\x4b\xda\x2a\x73\xa8\xde\x9d\xc0'
    b'\x28\xf8\x3f\x1d\xca\xea\x92\x28\xae\xa9\xfb\x46\xfe\xc3\x3c\xd2\xd3\x6c\x62\xa3\xdc\x80\x4f\x46\x01\x6b\xee\xfe'
    b'\x1b\xf8\xb1\xc4\x2d\xe1\xdd\x13\xc4\x12\xff\x16\x5a\xcf\xb9\x4e\x54\x04\xa0\xcd\xa9\xd1\x41\xe6\xea\x9b\xb6\x93'
    b'\xb3\xa1\xf4\x99\xa1\x2b\xeb\x3e\x15\xf9\x38\x7a\x95\x90\x70\x05\x2a\x68\x1a\x69\xab\x10\xd3\x64\x97\xec\xff\x1b'
    b'\x5c\x7a\x4a\x19\xb5\x2c\x18\x9d\x67\x77\x39\x3d\xbf\x86\x84\x47\x47\x34\x1f\x96\x76\xd1\xf8\xd9\x80\x6c\x8b\x27'
    b'\xc4\x33\xd5\x22\xeb\x1b\xe6\xf1\xe7\x1b\xf7\x0b\x64\xd5\xd3\x84\xfa\xe1\xa1\xfe\x4b\x1c\xa9\x3b\x4e\x8e\xf3\x04'
    b'\x4d\xb4\x37\x6d\x55\xea\x8b\xcc\xdc\x6d\x0f\xdb\x72\x68\x6b\x66\xf2\x30\xb9\x36\x98\x18\x39\x16\x95\xea\x85\x27'
    b'\x00\xc4\x7d\xa9\x5e\x8c\xc9\x1f\xba\x3e\x03\xc0\x03\x2c\xac\xc6\x13\x36\x2b\x40\x39\x44\xbd\x52\xce\x97\xe8\xb2'
    b'\xdc\xb2\x00\xc0\xd6\x3d\xd7\x8d\xf3\x7e\x37\x95\x71\x47\xd6\xe8\x6d\x6d\xa0\xbb\xfa\x06\xbd\x15\xeb\x8a\x91\x9d'
    b'\x81\x4d\x2c\x0f\x61\x8a\x4f\x13\x7f\x18\xb0\xc4\x23\x20\x83\xe4\xf5\x42\x18\x9b\xad\xe3\x70\x27\x84\xf2\xd7\x81'
    b'\xb6\x56\x97\x4f\x60\x1d\xc1\x2d\x03\xa4\x81\x93\xc7\xd7\xf5\x6e\x7e\x4d\xd4\xe3\xfb\xb8\x44\x12\xb9\xad\x29\x00'
    b'\xf8\x23\x64\x04\x1b\x78\xab\x1e\xe5\x92\xce\x0a\x1f\x74\x27\x47\xe0\x07\x76\xfe\xfd\x61\x95\xe9\x32\xbe\xdd\x0f'
    b'\xae\x65\x99\x15\x93\xbd\xd0\x86\x80\x43\xe1\xf5\x60\x1b\xbd\x40\x37\x65\xd5\xb3\xaf\x67\xe6\xa3\xfd\x05\x98\x7a'
    b'\x65\x53\xd9\x8f\xa8\x0d\x89\xd8\x60\xba\xae\xd8\xd8\x04\x12\xcf\x79\xe5\x82\xbb\x0e\x06\x78\x86\xc4\x14\x15\x93'
    b'\x79\x9e\x62\x37\x37\xe2\xfd\x75\x16\x98\x37\xf6\x5b\xb6\xd4\xbd\x11\x91\x47\x82\x33\x7f\xf2\x7e\x9a\x89\xeb\x8b'
    b'\xb5\xe8\x32\xce\xc0\x95\x38\x1f\x96\x9a\x15\xca\x76\x76\x0f\xd8\x8f\xea\x5e\x61\xd3\xf1\x8e\xa8\x42\xf4\xe8\x50'
    b'\x11\xfa\xd7\x15\xe2\x35\x9c\x61\x72\x41\xc4\xe7\x80\x16\x65\xb0\x59\xf8\xda\x1c\x79\x25\xf0\x02\xfd\xf5\xb9\xc2'
    b'\x63\xea\xf0\xba\x22\xeb\x0a\x1f\x41\xfc\xc0\x73\x98\x8f\xc1\xf5\xf7\x33\x72\x07\xe7\xfc\x7b\x29\x39\x47\xe3\x33'
    b'\x95\x5f\x1a\x33\xce\x4e\x1c\xa3\xd8\xe7\xe8\x0d\xf9\x69\xb9\x31\x41\x8c\x96\xd1\x6d\x7c\xd6\xd5\xf4\x44\x0e\xb8'
    b'\xf2\xe9\x3d\x8e\x2b\x86\xd8\x76\xed\x36\x62\x70\x66\xe5\xb3\x71\x3c\x2e\xb8\x83\x6a\x8e\xed\x59\x1c\x65\x20\x1d'
    b'\x07\x77\xa4\xdb\x0b\xa5\x7e\xe4\xac\x06\xdd\xab\x0d\xc4\x26\x79\xf6\xe8\xe0\xb7\x90\xfd\x35\x86\xd8\xe8\xf3\x9c'
    b'\xeb\x04\x6d\xac\xc4\x12\x33\x29\x34\x73\x2d\x1e\x1c\x65\xef\xb3\x28\x74\xb7\x69\xde\x83\x33\x67\xfa\x99\x49\x0a'
    b'\x44\xe4\x23\x5e\xff\x05\x87\xcd\xc3\xa2\x0b\x12\x01\x75\x9a\x29\x4f\x2a\x72\x8f\x34\x9c\xa6\x97\xce\x8a\xe7\x66'
    b'\xbf\x7c\x86\xf9\xa9\xcf\x7c\xea\xff\x21\xa3\x65\xe6\xac\x79\x41\xa8\x4a\x85\x5f\xa2\x10\xda\xb2\xa3\x3d\xc1\xb6'
    b'\xe1\x94\x4b\x6a\xbc\x0f\x4a\xa1\x69\x37\x77\xa3\x91\x65\x08\x4d\x08\xef\x64\x45\x4d\xaf\x4d\x65\x29\x9d\x70\xd1'
    b'\x3f\x16\x6b\xff\xae\xaf\x3a\x04\x94\x9a\x14\xe5\xf1\xa8\xf4\xd3\xf4\x37\x7b\x2c\x99\x0f\xed\x58\x79\x21\xa3\x8d'
    b'\x05\xfc\x7c\xf2\xad\x00\xa5\x3e\xc9\x47\xcd\xf0\xd5\x01\x03\xd6\x0b\x57\x96\x4f\xf2\x42\x99\x01\x5b\x9c\x62\x92'
    b'\x50\xbc\x96\x95\xc7\x36\x1a\x54\x0c\xeb\x7f\xc8\xef\xb3\x86\x65\x62\xe0\x29\x5f\x13\x81\x7b\xf7\x00\x22\xe1\xa1'
    b'\x06\x49\x20\xe0\x15\x73\x45\xe9\x47\x8c\xa1\xae\x27\x51\x5c\x2f\x2d\xee\x3b\xa4\xfe\x4c\x6d\xdc\x89\x92\x62\x1d'
    b'\xb0\x03\xe4\xd7\x79\x49\x12\x08\xf7\xe6\x5b\x30\x55\x4e\x9d\x9a\x2a\x91\xf6\xa8\x4a\x75\x8b\xed\x85\x61\xf9\xf3'
    b'\xf6\xcf\x0e\xf1\x4b\x7a\xef\x48\xf5\xa8\x2f\x82\x6b\xe4\xfe\x6d\x40\xce\x8d\xad\x9c\x26\x7a\xe5\x9a\xbb\x75\x19'
    b'\xa5\xa3\x01\x3d\x23\xd4\xb2\x34\x89\x9f\x5c\x1b\xbc\x87\x3a\x5a\xc5\x62\x4d\x25\x39\xfe\x31\xec\x98\xfe\x76\xfd'
    b'\x08\x3f\xbb\xe6\x5b\xd9\x41\xa4\x8d\x83\x1b\x47\xbb\x44\xdc\xa0\x23\xd3\x6c\x8b\x97\x0d\x8e\x8f\xe7\x37\x00\x61'
    b'\x14\xbd\x9e\x25\x4b\x96\x08\x4b\xb7\x05\xfa\xf8\x49\xfe\x96\xff\xde\x97\xfe\x4b\xdc\xed\x74\x28\x92\xa2\x4c\xd8'
    b'\x4c\x70\xa3\x51\xe5\x99\x6c\x93\x42\x86\xff\xa0\xc0\x85\x35\x93\x2a\xe4\x4c\x34\x66\xd9\x47\xba\xbc\x31\xe0\xf1'
    b'\x8d\xd8\x73\xe4\x5e\x4c\x84\xa0\xee\x05\x89\xd4\x7b\x23\xdf\xe6\x78\xfd\x78\x6a\xdc\x77\x86\x16\x3c\x75\x24\x36'
    b'\xfc\x7c\xf0\x08\x4f\x9c\xb8\x68\x41\x34\xe6\x11\x4a\x04\x0b\xa0\x42\xc9\xb0\x30\x45\x0a\xa6\xed\x2a\x89\x96\xad'
    b'\xe6\xa2\x13\xf3\x6e\x2e\xa9\x5d\xb0\xd2\x51\x0f\x37\x8e\xe8\x81\x6e\x13\x97\x8f\x7c\xbf\x03\xe8\x34\x6e\xdc\x32'
    b'\x91\x48\x92\xd5\x83\x10\xcf\xec\x19\x21\x38\x13\x6a\xb9\x45\xad\xe2\x59\xd6\x8f\xd7\x81\xa9\x6f\x9e\xbd\xfe\x62'
    b'\xc3\x4e\xdc\x22\x82\xdb\xf0\xeb\xee\x90\xea\x1e\xc8\xeb\x87\x51\xb2\xbc\xe1\x83\x4c\xee\x45\xe0\x8d\x41\x32\x61'
    b'\xae\x50\x62\xf7\xef\x87\xab\x0b\x00\xcd\xb1\x17\xe4\x81\xff\x02\x83\x78\x63\x75\x35\xa3\xd4\xe1\xdd\x0e\xed\xc1'
    b'\xa1\x8f\xb0\xde\xc9\x6f\x70\xe6\x36\xb5\xfe\x11\xab\xbb\xa4\x33\xc1\xfe\x7f\xe1\x33\x9d\xd4\xa6\xf7\x80\x4c\x67'
    b'\xfa\xb7\xfa\x6d\x02\x96\x0f\x7d\x63\x43\x78\x8f\xee\x02\xb9\x32\x1a\xe9\xbd\xf1\x7f\x6b\x0b\x22\x88\xfe\xa7\x66'
    b'\x86\x8b\xc3\x28\x82\x29\x3a\xe0\xca\xc5\x21\xa9\xfc\x9e\x58\x9b\x4b\xc2\xca\x4b\xcc\xe4\x7b\x92\x6c\x38\xc6\xc3'
    b'\x42\x3d\x26\x0b\x19\x6f\xd9\x72\xf0\x68\xa8\x18\xb6\x63\x1a\xd7\xa9\x8d\x0f\x20\xa5\x9d\x27\x26\x2a\x28\x32\x35'
    b'\xba\xec\xe0\x93\x2e\x19\xc7\xb1\x46\x9d\xb8\x6c\x2b\xdf\xec\x7b\x05\xb4\xbb\x42\xf3\x8b\xb9\x11\x21\x83\x76\x74'
    b'\xf0\x68\x01\x00\x85\xe8\xb2\x0f\xf6\x3f\x19\xac\x5d\x83\xad\x49\x7c\xf2\xf5\xde\xb9\xe4\xaa\xf0\x06\xab\xda\xcb'
    b'\xe7\x45\xde\xef\x94\xee\xf2\xbe\xe9\x8d\x38\x9d\x5b\x07\x32\xe1\x35\xfa\x17\x91\x11\xf4\x69\x10\xf5\xc0\xfa\x2e'
    b'\xa1\xc9\x3c\xe4\x2b\xe6\x1c\x38\x13\x0a\x8d\x34\xbb\x63\x72\x6c\x31\xe8\x4d\x9a\x9b\xcb\x45\x51\xc0\x61\xe9\x9b'
    b'\x99\xc8\x95\x08\x7e\x4f\x02\xf8\x98\x44\x47\x08\x6f\x5e\x52\x16\x22\xb9\x85\x5b\xc7\xc4\xf5\xa0\x7f\x78\x75\xfb'
    b'\xda\x61\x47\xe8\xa2\x5c\x9c\xf9\x2e\x4c\x66\x1d\x25\xdc\x2f\xd5\x02\x3e\x11\x91\x1d\x78\x2b\x2e\xb8\xf4\x09\x83'
    b'\x9c\x0f\xd1\xe6\xb6\x9a\xd4\x1b\xe5\xa7\xe8\x48\xa1\x48\xe7\x88\x4a\xcd\xa2\x31\xe8\x49\x4d\xfe\x45\x76\x92\x45'
    b'\x75\x6c\xe3\xdb\xc6\xf9\x37\x14\x9d\x85\x2f\x33\x8a\xac\x8c\x53\xfe\x40\xee\xdd\xb2\x1c\xd8\x90\xac\xe0\x46\xed'
    b'\x0e\x59\xd6\x2e\x29\x23\x2d\xd5\xd7\x82\x0b\xfd\x7e\x5a\x83\x70\xdd\x55\x01\xb1\x65\xde\x75\x69\x0b\xd9\xe8\xf8'
    b'\x02\xdf\x8a\x96\x7d\x1c\x2e\xc8\x52\x85\xc2\xa1\xc6\x9a\x0f\x60\x91\x31\x2d\xc8\xe4\x4f\x12\xcf\x17\x3f\x93\xdb'
    b'\xa6\x84\x70\xef\x1a\x9a\xa9\xc3\xc5\x91\xcd\xe0\xa3\x41\x99\xe3\x3e\x22\xd4\x28\x8b\xa2\x0a\x87\xb4\x6d\x30\x76'
    b'\xbb\x1d\x9d\x87\x8b\xdb\x78\x3c\x0e\x8d\xaa\x65\xad\xb1\xb7\xb3\xe7\x85\x11\x99\x7b\x2f\x6e\xc5\x39\x67\x6e\x24'
    b'\xec\xa5\xcf\x37\x6f\x06\xe2\x6a\x7e\x86\xf1\x8e\x6e\x6d\xfd\x99\xa2\x67\x42\xdb\x3a\x5f\xae\xc5\x43\x1b\x83\x68'
    b'\x5e\xcc\x3c\xf6\x3f\xae\xca\x96\xdb\x62\xb9\x0a\x07\xf1\x99\xb0\x2e\xce\xd1\x77\xc5\xe9\x15\xd7\x8b\xb2\x74\x9a'
    b'\x70\x67\x86\x9c\xcd\x6f\xfb\xa6\xa6\xbc\xa8\xc9\x4f\x58\x22\x81\x8b\xb1\xa8\xef\x44\x6e\x5a\x46\x1b\xcf\x54\x6f'
    b'\x6c\x94\x24\xb5\xf5\x15\x31\xa8\x7a\xe1\xcc\x94\x63\x19\x89\x74\x78\xc2\x21\xd0\x92\x1a\x9a\x8f\xb1\x0b\x57\x67'
    b'\x3d\x6c\x80\x94\xa1\x40\x5a\xf8\xd0\xa4\x1e\xa1\xfb\x18\xd4\x19\x57\x38\x51\x04\x16\xf0\x46\x43\x3c\x01\x49\x8a'
    b'\x39\xcd\x49\xfc\xd1\xfe\x09\xd0\x80\x71\xe0\x5f\x2d\xcf\xc4\xb8\x78\xd1\x6c\x57\xcf\x9d\xb5\xb9\xce\x41\x78\x72'
    b'\xd1\x19\x20\xc2\x06\x9c\x21\xe7\x81\x3f\x56\xf5\x2c\xbb\x74\x6e\x3b\x5b\xa1\xa9\xdf\x97\xce\x14\x2a\xbe\x29\x14'
    b'\x9b\x28\x97\x59\x54\xed\xc5\x3a\xf8\xdd\x04\xf1\x61\xc4\x36\x5a\x5e\xce\x17\x7c\x2d\xfd\x67\xba\x8b\xeb\x86\xf0'
    b'\xca\xf7\xb9\x45\x20\x9b\xfd\x29\xc5\x68\xba\xc2\x05\x45\x31\x6d\x41\x9b\xd7\x6f\xc0\xdc\xb1\xd8\x5d\x82\xa0\xde'
    b'\x6f\x9b\xfa\xb5\x3c\xb6\x8f\x4b\xdb\xae\x9d\x97\xe9\xae\x26\x07\x22\x09\xb8\x8e\xff\x11\x80\x75\x9f\xea\x45\xb9'
    b'\xdc\x47\x72\xb1\x43\x24\xb7\xb4\x8b\x11\xfb\xc2\x5f\x24\xe0\xa1\xe6\x32\x21\x55\x64\x23\x17\x81\x0e\xcc\x2d\x31'
    b'\x00\x08\x9f\x82\x3c\x15\x5c\x77\xc4\x2c\xcd\x14\x54\xce\x3e\x4a\xdc\x1b\xb2\xb5\x48\x4d\x53\xde\xbc\xca\x89\xf6'
    b'\x90\x09\xe7\x7c\x9d\xf1\xa6\xaf\xd4\x50\x21\xc8\x77\x41\xa3\x05\x90\x0c\xf6\xea\x9a\x38\xf5\xf1\x69\x23\x4b\x31'
    b'\x11\x3d\xba\xbc\x03\x74\xcb\xd6\xdc\xe9\x53\xa5\xb0\x06\xd3\xf6\xe0\x86\x1b\xea\x32\xe1\x38\xaf\x4c\x4d\x18\xeb'
    b'\xb2\xc3\x42\xe4\x0f\x13\xc7\x93\x98\xb5\xde\xa4\xfa\xd7\xdd\xc2\x49\x58\x42\xe6\x04\xd8\x79\xf1\xa8\x85\xe8\x3b'
    b'\xbf\xd3\xea\x68\x9a\x39\xc3\x7e\x81\xbc\xf3\x33\x95\x4c\xb2\xdc\xb8\x09\x72\x22\x48\xe6\xa7\xe1\xa6\x97\x3b\x9d'
    b'\x81\xfc\x52\x3f\x90\x29\x47\x2f\xff\xc0\xcf\x70\x55\xea\x2f\x8b\xac\xf7\xb9\x2a\x4f\xfd\x66\x13\x7c\xdf\x9b\xda'
    b'\xf7\x6a\x84\x82\xa2\x52\x68\xb4\x50\x4d\x23\x2b\x0d\xe6\x53\x8b\xfe\x9c\x13\x94\x34\x36\x44\x64\xd3\x75\x12\xff'
    b'\xe2\xd3\x65\x91\xaa\x33\xf4\x7a\xa8\xdd\x24\x3c\x39\x05\x9f\x2c\xc5\x78\xe9\x0d\x46\x4f\xdd\xe5\xa0\x5b\x9b\x6a'
    b'\x72\x74\xaa\x32\x2b\x88\x6e\x5f\x28\x5d\x97\x91\x61\xb5\x91\x1d\x2c\xc8\x9c\x55\x0e\x5c\x5b\xc3\x97\x87\x99\x87'
    b'\xbd\x0e\xc0\xda\x0e\x54\x7f\xa7\x78\xd9\xe5\x90\x90\x6c\x41\x98\x86\xb9\x4f\x43\x7f\x43\x52\xcd\x99\xd5\x43\x69'
    b'\x9e\xa2\x3c\x50\xb1\x42\x27\x53\xd2\x36\xb2\xd5\xef\x2a\x02\xcc\x48\xaa\x22\x5e\x16\x8a\x3b\x72\xb5\xe2\x47\x03'
    b'\x85\x77\x38\xf4\xd4\x20\xeb\xff\x8a\x70\x92\x67\xb9\x47\x54\xc8\x64\x0c\x2c\x25\xf6\xe7\x9d\x56\xd5\xd2\x79\x23'
    b'\xb2\x24\xd7\xde\x12\x96\x28\xad\x95\x4b\x65\x7d\x87\x63\x50\xd2\x90\xce\x81\xeb\x20\x98\x10\xb2\xc3\x44\xd9\x9a'
    b'\xc4\xae\x13\x56\x50\xad\x20\x55\xd6\x84\x52\x71\x5f\xf7\x8e\x1b\x4f\xd3\x01\x29\x68\x49\x9d\x60\x85\x49\x01\xbc'
    b'\x2e\x0b\x13\x9c\xe4\x28\x2a\x57\xf7\xd0\xd2\x12\xf9\xa7\x58\xb0\x92\x56\x64\x8e\x90\xf2\x59\x20\xee\x7f\x90\x8b'
    b'\x2d\x7c\x78\x8e\xd4\x14\x83\xcc\x20\x74\x21\x78\xeb\x73\xa7\xcd\xa6\xc9\x7a\x9a\x67\x41\xb2\x4a\x45\xfd\x1d\x7d'
    b'\x9d\x70\x66\x48\xc0\xa3\x0a\x2f\xeb\x93\x27\xd0\x45\xcd\x25\x0d\x71\x4f\x6a\x21\x05\x43\xc9\x24\x5e\xa8\xf0\xaf'
    b'\x7b\xc4\xf7\x09\xb6\x1f\x4d\xae\xdf\x5b\xe6\xf0\xe4\x24\xe8\x24\xb2\x81\x50\x5c\x18\x1b\xe4\x96\x38\xfd\xac\x65'
    b'\x5f\x94\xe3\x39\x3c\x5f\x97\x2d\xf0\xdc\xa5\x04\xde\xdb\xff\xf5\x11\x40\xb9\x2e\xb6\x6b\x7a\x76\xd2\x4a\xfe\x51'
    b'\xee\xc7\xc9\xcf\x78\x07\x20\xa1\xae\x72\x80\xd1\xf5\x98\xef\xb8\x7c\xcd\x1d\x76\x15\x87\x31\x37\xac\x5e\xb9\x89'
    b'\x9f\x6d\xd6\x8d\xf0\x79\x06\x56\xac\xe4\xd3\x17\x76\x55\x6d\xa5\x61\x21\x2e\x55\x6c\x67\xa8\x0a\x8d\x06\xfc\xbc'
    b'\xc0\x91\x3c\x03\x05\xba\xab\xdb\x94\x28\x1f\xf4\xcd\x62\x0e\x32\x07\x49\x7a\x43\xed\x13\x10\x26\xeb\x24\xc1\xa8'
    b'\xf2\xa4\x64\x51\xf4\x12\xc9\xd1\xec\x9e\x50\x3c\xe5\x89\x6e\xc0\x4c\xea\x37\x88\xf5\x3d\xd4\x5b\x1f\x55\x73\x98'
    b'\x51\xc0\x9e\x4f\x4f\xf0\xd7\x60\x37\x22\x72\x23\xa0\x09\xcb\xdf\x4c\x4a\xdb\x49\xf0\x4f\xf0\xde\x95\x9a\x6c\xba'
    b'\x30\xf9\x1e\xb4\x6f\xc6\x66\x25\xd9\x6e\x62\x0d\x28\xfe\x66\x8b\xfc\x22\x26\xfd\x1d\x5c\xfb\xb8\x29\x76\xd8\xce'
    b'\xd0\x32\xaa\xbe\xcf\xd8\x2c\x2e\xe4\x47\x18\xb7\x6f\x37\xdc\xe4\xde\x19\x72\x19\xe3\xef\xf3\xdb\xa5\x4f\xd5\xab'
    b'\x12\xd5\x11\x3f\xba\xf9\x1a\x99\x2d\xf3\xb5\x88\x91\x46\x1a\xca\x6c\x09\x7a\x3e\xb0\x60\x25\x17\xad\xd1\xea\x82'
    b'\x54\x54\x02\x85\xbc\x9a\x3f\x68\xfc\xe0\x83\xaa\xf3\xbc\x14\x4a\x4a\xab\xa7\xd5\x59\x8c\x69\x66\x2d\xa2\xef\x7f'
    b'\x0a\xc9\x67\x8c\x44\xfc\x61\xe2\x7d\x6d\xf2\xaf\x25\xfe\x6f\x56\xe4\xa9\xf6\x57\x80\xf0\x80\x7c\x12\xb2\x0e\x33'
    b'\x3d\x36\x79\xdb\xef\xe6\xee\x3e\x70\xe6\xf5\xf8\x1d\x75\xc8\x90\xaf\x41\xc0\x7a\x48\x54\x94\x1a\xd8\x25\x13\x37'
    b'\xf1\xa9\x90\x15\xa6\xad\xf1\x19\xf3\x42\xfc\xd6\x02\x4a\xa3\x99\xf9\x20\x21\xfa\xb5\x28\x80\x5e\x04\x71\x6f\x62'
    b'\xae\xfd\xff\xb3\x1a\xfb\xa5\xab\x26\xf6\xfc\x8f\x10\xff\x8b\x32\x63\x48\x9c\x36\x1c\x39\x6f\x30\xad\x62\x9b\x20'
    b'\x63\x02\xf2\xf6\x38\x81\x53\xa2\xea\xc2\x59\x41\xe1\x91\xed\xcd\x3e\x31\xec\x32\x96\xd4\xef\x80\x7a\xef\x41\x0b'
    b'\xeb\x21\x19\x15\x05\xf1\x6a\xb7\x9d\xaa\x26\xbd\xc0\xfb\x75\xfa\x90\x62\x5b\x8b\xf4\x03\xda\x63\xd1\xd2\xf5\x7b'
    b'\x88\xaf\x0b\xca\x6c\xc7\x1f\xc9\x8c\x4f\xe8\xf8\x6f\x2e\x16\x37\xd0\x72\x26\x83\x9f\x1d\xbb\x50\x99\x83\x07\x1b'
    b'\x90\x57\x92\x2a\xfe\x10\x3d\x6f\xbd\x16\xd6\xf3\xa6\x33\x59\xb0\x81\x16\x6d\xf9\xe1\xbf\x4c\xbb\xe0\x1d\x27\x36'
    b'\xba\xf6\xf8\xe9\xfd\x02\xa4\xa4\x37\x88\xf0\x50\x32\x23\x2a\xa3\xf6\x81\xa1\x10\x48\x6f\x9d\xe9\x29\xca\x59\x45'
    b'\xbd\xf9\x25\xbb\x88\xa2\xd6\x47\x0f\x6b\x64\x6b\x24\x47\xb2\xb8\x5d\xb9\xb6\x15\x2d\x69\xae\x25\x4b\x1a\xc7\xfa'
    b'\x08\x45\x47\x5a\x74\x06\x91\x61\xdb\x00\x47\xbf\xe3\x93\x2d\x0e\xcf\x2a\x85\x0d\x0c\x5f\xa1\x70\x98\x66\xe6\x2a'
    b'\xc7\x08\x5a\x15\x2e\x8b\x2e\x86\xe7\x5f\x9a\xfe\x22\x31\x78\x83\x0f\x56\x20\x5c\x85\x1d\xb8\x80\xcf\x1c\xab\x87'
    b'\x21\x2a\x34\x4e\xde\x46\xdf\xe8\x77\x6e\x42\x6c\xa1\x17\xef\x56\xea\xcc\xdc\xee\x1d\xef\x34\x7b\xcb\xad\xfb\x66'
    b'\xcb\xea\x5c\x30\xb2\x91\x70\xcb\xb2\x6d\x8f\x05\xd8\x05\xef\xce\x80\xef\x09\x07\x8c\xba\x79\xb1\x65\xb9\x0c\x1d'
    b'\x33\xa7\x2f\xba\x87\x6c\x6d\x50\x08\x77\xfb\xc1\xb7\xb3\xc7\x49\xad\x63\x45\xef\x25\x5c\xf3\x28\x15\xa1\x82\xfa'
    b'\x67\xd8\x62\x5d\x84\x7f\xaf\xd1\x38\x8c\x76\x52\x9b\x3c\x45\x64\xa9\xa1\x5b\xfe\x0d\xd4\xc8\xbf\xe9\xdf\xf6\x3e'
    b'\xde\xf8\xd6\x1f\x64\x7b\xac\xd8\x4c\xcf\xb3\xed\x04\x95\xe0\x82\x0f\x16\xaf\x8b\x11\xc8\x73\xe2\x59\xbe\xe4\x86'
    b'\xbb\xd7\x67\xad\xfd\xa5\x3f\xee\xdf\x26\x50\xb3\x01\x0f\x71\x89\xbc\x00\xc9\xc0\x0d\x20\x41\x97\x94\xb7\x0e\x32'
    b'\xde\xbb\x79\xe7\xac\x92\xfb\x24\xef\x4c\x3a\xe2\xb7\x96\x6e\x99\xfd\xbb\xfa\x62\xd2\xee\x73\x4b\xe7\x3b\x69\x83'
    b'\x0e\x5f\x6a\x17\x69\xee\xcb\x09\xfb\xf4\xd8\x88\x5d\x75\x6c\xc8\xd8\x35\x8f\x52\xf3\x86\x65\x8e\xa2\x4a\x4b\x3d'
    b'\x21\xdd\xe9\x03\x08\xdb\xdb\x6f\x4e\x27\x5e\xeb\x7b\x1e\x81\x89\x8a\x1c\xd8\xb8\xb2\xcf\xd8\x87\xd2\x08\x33\x79'
    b'\x77\x96\xff\x9e\x02\x7a\xb1\xe3\xbf\x17\x19\x34\x91\x56\x9f\xc0\x28\x1c\x80\x4f\x71\xb9\x34\x3a\x4d\x20\xd5\x97'
    b'\xbb\x08\x65\x5c\x3b\xb9\x58\x9c\xb3\xb4\xbc\x88\xea\xa5\x14\x50\x4d\xd2\x0c\x98\xe9\x1f\x3d\xb8\xf4\x38\xf7\x11'
    b'\xff\xaf\x33\x20\x61\x74\xd1\x85\x15\x0b\x9d\x94\x66\x3e\x79\xca\x86\x57\x7f\xd7\x35\xab\xbe\xdb\xbb\xf8\x5f\xaa'
    b'\x50\x65\xe7\x97\xe5\x4e\x5d\xd2\x35\x42\x39\x06\x27\x16\x4d\x4e\xf8\xa7\x5d\x15\x5c\xac\xf8\xc3\x0d\xe4\x87\x95'
    b'\xf7\xa2\x39\x19\x9c\x51\xf1\xc7\xed\xdc\x1c\xe9\x8c\x0b\x9a\x0d\xf6\x54\x1e\x0b\x4c\x1b\x05\x6e\x8e\x35\x44\x18'
    b'\x6d\x82\xf0\xcf\x5f\xa9\x91\xf4\xd3\xe0\xc9\xc0\xb4\xa2\x22\x2e\x38\x59\x44\x86\xe5\x30\x45\xa5\x9f\xf3\x57\x84'
    b'\xbb\xa1\x8e\x33\x5e\xe9\xad\x9f\x14\x3f\xb0\xe1\x07\xdd\x4c\x8d\x9a\xac\x3a\xd6\xd7\x65\xb6\x1f\x68\xae\xf9\xfb'
    b'\xa9\xce\x40\xb9\x4a\x69\xde\x61\xbc\xa6\x42\xfb\x49\xbf\xc8\xc4\x77\x1f\xc9\x88\xed\xe1\x2d\x5d\x83\x10\xc3\xfd'
    b'\x49\x9d\xd9\x4f\x8a\x42\x89\xd2\x50\x53\xc8\xc6\x47\x13\x3b\x50\x98\x51\x2a\x3e\xcb\xa6\x0c\xd3\x05\x90\x79\x2d'
    b'\xf4\x0b\xa3\xa5\x41\x07\x19\xac\x6e\xcc\x3d\x76\x0c\x95\x32\x6d\xdb\xaa\xa8\x4f\xc4\x62\x62\xda\xe5\x48\x54\xff'
    b'\x4a\x94\xc3\x9c\x8b\x1d\x7d\x46\x76\x12\x15\x88\x51\xce\x92\x4b\xf0\x04\x04\x09\x3c\x78\x20\x48\xa8\xdc\xe1\x4e'
    b'\x8e\x76\x89\x18\x30\x2a\x19\xda\xe9\xca\x84\x79\xa3\x9c\xaa\xbd\xa4\xc5\x9e\x66\x4f\x93\xca\x39\xfe\xec\xef\x8d'
    b'\x86\x56\xc4\x8c\x48\xd7\x5d\xaf\x6f\x25\xd7\x9f\xbc\xcb\x6c\x05\x2a\x38\x71\xcd\x62\xb3\x45\x8b\xc2\xfd\xe8\xbf'
    b'\x87\xea\xc8\x56\xcd\x5f\x35\x28\x71\xca\x22\x19\x0f\x0b\xdd\xbd\x3f\x18\xd5\x80\xbb\x12\x86\x17\x15\xff\xc3\x05'
    b'\x92\xd3\xd9\x35\xa1\xc3\xa5\x42\xb3\xad\x6a\xba\x50\x0f\x08\x7b\x94\xc5\x1a\x9d\x4d\xdb\x17\xde\x96\x2c\x67\x2a'
    b'\xac\x95\x9d\x12\x6e\x2d\xac\x62\xe5\xf7\xa6\x29\x42\x7d\x44\x54\x1f\xfb\xfa\x5b\x9f\xec\xad\x0e\x25\xfd\xb1\x81'
    b'\xd6\xfc\xa2\x49\xc8\xb5\x09\x3d\x10\xc3\xf5\x20\xad\xdb\xc1\x4b\x9b\x0c\x28\x9f\x6f\x20\x6d\x35\x58\xff\x42\xb3'
    b'\x0e\xef\x91\x52\x10\x54\x75\x4a\x7c\xe1\x56\x6e\x2a\x28\x40\x50\x53\xa3\x06\xc1\x2b\x78\x72\x1a\x2c\xb4\x80\x7f'
    b'\xf5\x65\x2b\x51\x71\x9b\xee\xc7\x9a\x49\xfc\x70\xaa\x52\x2c\xa3\x89\xc4\x5c\x94\xa4\xdd\x81\xd5\x90\x20\x89\xf0'
    b'\xba\x7f\xc4\xea\x62\x9c\x2f\xc1\x70\x03\x4d\x87\x8b\x5f\xdc\x2a\x5f\x3e\x72\xfa\x07\xa9\x37\x9e\x8d\x6b\xbc\x4e'
    b'\x82\x72\xc7\xa5\xdf\xc9\xe2\xce\x9c\x79\x7e\x44\x33\x1d\xdf\x4d\xe9\x60\x42\xff\xc7\xeb\xf0\xc8\xba\x9a\x88\x02'
    b'\x62\xb3\x8c\x90\xb7\xdc\x27\xa2\x97\xec\x22\x4f\x7a\xdd\x40\xae\xb1\x58\xea\xf1\xc2\x52\x50\xd4\x4a\x46\xca\x84'
    b'\x79\x45\x52\xf9\xb1\xe2\x1a\x88\xba\xaa\xb7\x52\xfc\x57\x71\x61\x68\x3f\x80\x50\x3f\x14\x66\x20\x08\xfb\xf1\xe5'
    b'\xb2\xbd\x7d\x19\x84\x35\x05\x5f\xd4\x66\xff\x6f\x02\xa6\x62\xf5\x88\x29\xfb\xc3\x2b\xf9\x23\x1d\x64\x67\x3e\x49'
    b'\xd9\xde\xf8\x39\x82\x01\x37\xc1\x2c\xc7\xcb\xb2\xbd\xc8\xd5\x85\x9e\x01\x18\xbe\xc4\x3f\x2e\xb6\xa8\xb7\x8a\x99'
    b'\x81\xe3\x3b\x98\x56\x6f\x81\xed\x01\x28\xb6\xaa\xd1\xff\xc9\x62\xae\x8b\xd6\x3e\x3e\x07\x7c\x07\x98\x26\x0a\x47'
    b'\xe9\xe9\xed\x3e\x1c\x13\xbe\xe5\x89\x8e\x6f\x84\x5f\x2f\xf7\x29\xf5\x58\xe7\x7d\x84\xc9\x47\x62\x8f\xb0\x1b\x11'
    b'\x11\x59\x50\x7d\x54\x46\x53\xc6\x89\xbd\xf5\xb8\xc0\x8f\xf4\xd7\xc5\xd8\xc8\xdf\xcf\x8a\x74\x90\xfc\x2d\x8f\x26'
    b'\x0b\x54\x37\x4f\x27\xd0\xe2\x0e\xdc\xb4\x47\x9b\x87\xb8\x51\x5d\x9d\x5e\xd6\x7c\x6c\x10\x8b\x61\xd6\x80\x13\x78'
    b'\x58\x7e\x3c\x6a\x1e\xdb\x85\xc6\xf0\x45\x7d\x10\x46\x86\x67\x55\x3e\x27\xb8\xbe\x34\xdf\x00\x6b\xea\x98\xee\xb3'
    b'\xfc\x3c\x73\xf4\x15\x61\xf6\x2e\x19\xb6\x6a\xe7\xf8\x83\xaa\x42\x4c\x16\x65\x8a\x5d\x85\x31\x1b\x2f\xbe\xda\xaf'
    b'\x90\x83\xd5\xf4\xac\x25\x6c\xd2\x3a\x92\xa2\xb3\x56\xcb\x1c\x23\x57\x26\xb8\x8c\xf2\xb0\xd0\x7b\x1b\xf2\x70\x02'
    b'\xf3\xa1\xe8\xa1\xc5\x0b\xc3\xc2\x69\x93\xc9\x4b\x15\x11\xe5\xfd\xdc\xe8\xf7\x73\x96\x16\x3a\xc7\xa1\xf6\x68\x1b'
    b'\x22\xe2\x01\xbc\x25\x00\x52\x37\xf6\xc7\xb0\x70\x02\xbb\x52\x74\xfb\xd5\x2e\x96\x33\x2a\xe4\x8f\x55\xb0\x5d\xed'
    b'\xda\xd5\x54\x12\x60\x86\xc3\xdb\x6b\x1f\xeb\x8d\xdb\x65\x6f\x39\x57\x9f\xaa\x8b\x4d\x90\x9a\x9d\x55\x6a\x76\xcf'
    b'\xcc\xf7\x81\x6e\x7f\xb3\x34\x1e\x86\x95\xb4\xdd\x51\xc7\x37\x5c\x5b\xe5\xbc\x81\xb7\x51\xf1\xaf\xa7\x18\x87\xb0'
    b'\x8a\xc3\xea\x16\xd5\x13\x36\x69\x99\x96\x47\x11\xb8\x4b\x06\x25\x31\x19\xec\xd8\xb2\xd0\xcd\xf4\x08\x4f\x48\xc7'
    b'\x3a\x67\x90\x16\xea\xa2\x01\x60\xd6\x8c\x27\x82\x68\xba\xd2\xce\x1c\xb6\x45\x0a\xe3\x04\xea\x7f\x81\x96\x7d\x1c'
    b'\x01\x4e\xbb\xe1\x7f\x99\x52\x30\xb6\x27\xc2\xb2\x54\x0e\x50\x85\x04\xf3\x46\xc7\xc7\x59\x5c\xeb\xbd\x3b\xb1\x33'
    b'\x8a\x8c\x18\x00\x47\x67\xe6\x22\xc8\xad\x57\xd9\x08\x88\xd7\x4d\x91\x1d\x4c\x4c\x39\xde\xc4\xe0\xfe\xed\xf9\xf7'
    b'\xb0\x7e\xd3\xb1\xab\x37\x86\x5e\x59\x4f\x47\xcd\xd8\x90\xcc\x77\x8b\xe4\xf5\x79\x39\xbe\x85\xf5\xb3\xaf\xeb\xf7'
    b'\x36\x91\x1f\x7c\xb6\x3b\x7d\xb5\x0b\x0e\x5c\xa8\x8b\x4a\x70\xa0\x87\x88\x14\xc1\xe8\xa8\xcc\x41\xfe\xef\xcc\x3f'
    b'\x23\x6d\x99\x55\x96\xf7\xc5\x0e\xa9\xac\xbc\x2c\x9a\xd4\xbe\x7f\x93\xcc\x6c\x01\x0e\x59\xaf\xf6\x6e\x21\xd8\x3b'
    b'\x6c\xdf\x70\x1b\x18\x26\xca\x8d\x73\x48\x3a\x6f\xee\x41\xae\x69\xb6\x5c\x71\x17\x71\xf4\xed\x9f\xaa\xc4\x6a\x10'
    b'\x57\x8f\x48\xe4\x01\xa8\x30\x28\x76\x21\x87\xeb\x7e\x71\x7f\xeb\x69\x94\x61\xe1\x77\x5b\x4a\x3f\xf5\x65\x3b\x07'
    b'\xb0\x80\xef\x00\x1c\xd4\xe8\xb5\xeb\x8d\x90\xd9\x8f\xc4\xe2\x03\xde\xe8\x9d\x5b\x9f\xbb\x32\x56\xff\x6d\x82\x29'
    b'\x24\x8b\xb6\xf2\x23\xc2\x8f\x10\xbe\xaf\x8b\x30\xbb\x47\xdc\x2a\xee\x8c\xe3\xd0\xf5\xba\x46\x38\x23\x86\x26\x4b'
    b'\x80\x14\x98\xa8\x83\x28\x3c\xf9\x87\x3e\xef\xc3\x26\x79\x49\x41\x3c\x26\x0d\xcd\xae\x9b\x38\x5c\xfe\x9f\x72\x60'
    b'\x06\x9f\x4e\xf1\x6e\x76\x4f\xca\x9e\x55\x1d\xbe\x8c\x86\x06\x3a\xce\x51\x08\xb7\x53\x71\x24\xdc\x53\xbe\xe7\x1a'
    b'\x00\xa1\x53\x36\x2a\x6f\xfc\x8d\x7b\xb1\x8b\xa0\x3c\x72\x2a\x6a\x3d\x7f\x70\xb5\x01\xaa\xd6\xdc\x1e\x05\x0b\xd8'
    b'\x1b\xc0\xa9\x3c\x49\x4c\x14\xe7\x7b\x2a\xe2\xe3\x5e\x78\xb1\xa2\x28\xb4\x84\x95\x1e\x8b\xce\x9f\xe9\x59\x98\x2e'
    b'\x6b\xd3\x2c\xfa\x7f\x7f\xf0\x10\xf0\xee\x6a\xe1\x9c\xcc\x1a\xf7\xe1\x48\x1e\x0e\xc5\xfe\x28\x46\xb8\xe0\x9d\x66'
    b'\xcf\xd5\x23\xc1\x14\xed\xe6\xfb\x35\x1b\xdd\x46\xa1\xb4\x0e\xfc\xd6\x74\xb4\x2e\xa8\xcb\x79\x55\x10\x68\x28\x5a'
    b'\x37\xcb\x2e\x94\x3a\x30\x36\x05\x81\x67\xcf\xfd\x3d\x2b\xc9\xba\x41\x1d\x86\x94\x50\xae\x27\x92\x7b\xbc\x54\xbc'
    b'\xd4\xf3\xc3\xb4\xa7\x01\x0f\x88\x0c\x08\xde\x85\x51\x2a\x9b\x3e\x98\x23\x2d\x08\xca\xcf\xb2\x95\xef\xc5\x15\x68'
    b'\x98\x1b\x08\x2e\x98\xc4\xa4\x60\x69\x52\xf6\xfa\xf6\x9d\xa4\xae\x97\xac\x8b\x57\xbe\x56\x43\x4f\x42\x1e\xdf\xf1'
    b'\x19\x2e\xf3\x44\x4f\xee\xc6\x6b\x70\x7a\x40\x25\x09\xfb\x58\x0a\x1c\xfc\xf9\x67\x53\x59\xfc\x79\x40\xa4\xca\xd9'
    b'\xcb\xd5\xae\x38\x1f\x94\x80\xe7\x44\x45\x79\x58\xd8\xab\xb0\x9c\x1c\x30\xc9\x07\xf6\x30\x71\xc6\x90\x66\xbe\x8c'
    b'\xee\x09\x77\x24\x4d\x3e\xc0\x1e\xb5\x8b\x04\x93\x32\xce\x49\x4b\xfa\x9d\xbf\x69\xc2\x4d\x7b\x8a\xbd\x2c\xd0\x93'
    b'\x76\xf9\x5a\x39\x8e\x6c\x0f\x1e\x88\xd5\x27\xe7\xba\xd7\x97\x52\xba\x06\x38\xe8\x34\xd3\xe1\x92\xb9\x1d\x60\x8f'
    b'\x51\x5e\x6c\x30\x1b\x09\xf5\x4f\xef\x9c\xfe\xbf\xb7\xba\x8b\x7b\xca\xc3\x9d\x01\x41\x72\x87\x52\x7f\xe0\x38\x0e'
    b'\x02\xd3\x87\xf2\xbf\x7d\x52\xd8\x03\xcd\x84\x03\xb8\xcd\x0e\x48\xee\x65\x6d\xab\xfe\x9d\xc5\x05\x7d\xde\x3e\x8e'
    b'\x14\x6d\xd8\x82\xde\x2c\xa4\x53\x70\x22\x2b\xb0\x6c\xf4\x5b\x9f\x7c\xfb\x92\x1f\x65\x27\x0a\x73\x81\x6f\x69\xb9'
    b'\x04\x0e\x73\xdf\xd8\xfd\x16\x0a\xee\xd9\x0f\x06\xee\xc7\x53\x15\x52\x5e\x1a\xfd\xde\xb4\xb9\x78\xc4\x50\xa2\xac'
    b'\x36\xf6\x38\x60\x00\x72\xbe\xf8\xb9\xae\x00\x5f\x5b\xde\x4f\x81\x6e\x3b\x33\x41\xff\xaa\xb4\x81\xc6\xbe\xb2\xcd'
    b'\x26\xfa\xb1\xbc\xd3\x64\xfb\x5c\xbe\x37\x18\x7c\xaa\x60\xdc\xb8\x1f\x97\xab\x9e\x36\x0c\x2b\x88\x91\x38\x2a\xfc'
    b'\xa4\x89\xa4\xc2\xfe\xe2\x42\xaa\x50\x64\xdf\xe1\x16\x00\xfd\x90\xb5\x38\xab\x55\x42\x35\x5a\xcb\x57\xb4\x59\x8d'
    b'\xaf\x46\x90\x96\x89\xf1\xff\x0b\xe0\x7d\x35\x6a\x3a\xd1\xab\xa1\xce\x9d\x66\xa6\x97\xd9\xa7\xac\x87\x26\x22\x4f'
    b'\x3a\x11\xb9\x13\xc7\xd8\xf5\xc3\x11\x48\x28\x92\xb7\xf8\x86\xd1\xe8\x34\x4d\xc6\xf6\xf6\x5c\x47\xa7\x80\x08\xcc'
    b'\xff\x47\xd4\xfe\x60\xe0\xd9\x32\x5d\xe2\x26\x08\xd2\x23\x01\x41\x02\x47\x83\xb7\x55\x64\xb6\x9f\x19\xbc\xa4\xdd'
    b'\x09\x5c\xf7\x6c\x0e\x17\xfc\x1c\xbf\x6f\xc9\x9c\x4b\x65\xad\xb3\xcc\x7c\x96\xe4\x04\x21\x15\xb9\x4f\xdf\x39\x43'
    b'\x85\xa9\x2a\xcd\xac\xb5\x71\x2f\x7f\xbd\xc1\xe8\x97\x8c\x27\x22\x54\x49\x20\xa2\x35\xfb\x5b\x90\xc0\x9c\x2d\xe5'
    b'\xf2\x8f\x21\xea\xf7\xd9\x5f\x4e\xd2\xbe\xce\x01\xc0\x8a\x54\xa7\xc0\x3b\x67\x99\x54\x2e\xb2\x63\x05\x5b\x2a\x11'
    b'\xc7\xee\x6f\x3a\x91\x0d\x10\x71\x79\xf1\x73\x53\x7a\x57\x44\x31\xed\xc4\x21\x0c\x3b\xd6\x79\x2d\x0a\x7e\x48\xc0'
    b'\xf2\xda\x06\x0b\x41\x3f\xbb\x20\x98\xe5\xed\x70\xa5\x6a\xeb\xa4\xa4\x50\xa9\x45\xda\xc2\x80\xd2\x06\x6b\x61\x69'
    b'\x13\x36\x09\x06\xac\x4d\x4a\x0a\x73\x60\x2e\xf8\x8c\xea\xa0\xf6\x5a\xcb\xb8\x69\xf6\xf5\x41\xfa\x48\x45\x6f\x9a'
    b'\xe2\xbb\x15\xe5\xad\x6e\xce\x93\xde\x49\x61\xd3\x44\x3a\x75\xf7\x1c\x0d\x75\xa6\x83\x01\x20\xf8\x34\x03\x7c\x37'
    b'\xe8\x38\xd9\x76\xb4\xeb\xcc\x52\x79\xea\x07\x25\xb1\x76\xc0\xfd\xe3\x97\xbb\x27\x26\x91\xee\x2c\x97\x93\x83\x73'
    b'\xd1\x71\x0b\xd8\xec\xb4\x41\xc3\xca\xab\xa5\xef\xc4\x3b\xb5\x1a\x7e\xe8\x7e\xf8\x38\x65\x60\xbb\xdd\x3e\x10\x9b'
    b'\x36\x4a\x38\x16\x62\x09\x18\x6b\xad\x01\x11\xcb\x4e\x4a\x52\x2c\x1b\x11\xf6\xea\x9d\x77\x75\xe5\x5c\xae\x6b\x3c'
    b'\x6f\x5d\x42\x4c\xea\x46\xc2\x61\x5a\x61\x9a\x9e\xfc\xbc\x66\xc6\x58\xd4\x5d\xf6\x6b\x5d\xea\xb5\x0c\x92\xa7\x38'
    b'\xce\x72\x7f\x40\xa9\x2e\xe3\xf0\x56\x6b\x30\xdb\xfd\xf2\xd8\x1f\x8c\x84\xf3\xe4\x78\x1e\xc2\x24\x52\x92\x02\xf7'
    b'\xfd\xae\x2b\x12\x48\x21\xee\x97\xb5\xd0\xe8\x65\x57\x6f\xba\x3b\x14\xb4\x2f\x08\xcb\xf3\xae\xda\xf9\x93\x4a\xb8'
    b'\x36\x51\x1e\x37\xa6\x3f\xbc\x64\xc0\xd2\x29\x5d\xbf\xaf\xd4\x00\x73\xf5\xe7\xbf\x09\xa9\x91\x76\xe3\x35\xce\x34'
    b'\xad\x57\x24\xac\xcd\x57\xf0\xad\x5e\xd8\x4d\x30\x28\x57\x50\xed\x01\x49\x93\x77\x0a\x57\x00\xaf\x4b\x62\x8e\xb1'
    b'\x3a\x33\x05\x9f\x7e\xee\xac\x62\x16\x84\x82\x69\x4e\xae\xf8\x85\xe1\x7a\xc7\xfb\x5c\x05\x29\xf2\xbe\x32\x52\x11'
    b'\x87\xfc\xf9\x5f\xb9\x5b\x66\x43\x3c\xd1\xe3\xcd\xba\x29\xf5\x95\x2c\x71\x66\xb3\xa8\x01\x12\x7f\xcc\x37\xe8\x3e'
    b'\x4a\x6a\xcf\x66\xe0\xff\x67\xf6\x92\x01\x3e\x8b\x69\xd5\xb0\x62\x74\x06\xf3\x57\x1a\x05\x19\x6d\xf1\x74\x94\x52'
    b'\x97\x57\xf8\x80\xf8\xd3\x44\x23\x39\xfe\x28\x86\x0a\xfb\xaa\x71\xdc\x12\xbf\x82\x3d\x51\x9c\x2f\xd8\x38\xc9\x54'
    b'\x51\x6b\x06\xd5\x3c\xe7\x43\x06\x48\xea\xb0\x69\x3c\xcc\xb7\xbe\xcd\x25\x7a\xab\x4e\xa9\x96\x64\x4b\x9e\x18\x7d'
    b'\xc4\x75\x8e\x81\x4b\x87\x67\x7b\xa2\x4c\x7c\xcb\xcc\x7b\x5d\x3c\xd1\x8a\x9a\x05\xe1\x91\xcc\x56\x16\x79\xcc\xce'
    b'\x9a\x46\xd3\xbc\xa3\xba\xc0\xb8\x19\xd3\x1a\xc5\x5f\x6d\x49\x12\x04\x16\x79\xcd\x85\xe4\x10\xae\xfc\xe1\x0d\x79'
    b'\x05\xa7\x9d\x25\xc4\x13\x58\xbc\x5f\xef\x5f\x34\xe8\xe6\x81\xf4\x49\xe6\xbf\x9b\x77\x3a\xde\x09\xac\x4b\x7b\xe5'
    b'\x8f\xae\x29\x96\xf2\x68\xd1\x28\xe5\x6a\x43\xca\x69\x2d\x88\xec\x80\x08\x0c\x8b\xe3\x73\x3e\x57\x0b\xa4\xc8\xc8'
    b'\x86\xb0\x56\x5e\xc9\x1a\x49\x4c\x5d\x05\x7e\x3d\x7e\xe8\x6d\x3d\x9d\x70\xc3\xc4\xa3\x29\xe9\xa2\xa9\x2b\x26\x18'
    b'\x25\xb1\x6f\xd5\x37\xdf\xed\x51\x64\x27\x73\x87\x36\x6a\xea\xc0\x33\xa9\x51\x6a\xeb\x49\x33\x3a\xac\x17\x2b\x50'
    b'\x8d\xe3\x96\xf3\x9c\x7c\xd5\xb5\x26\x74\xe5\x50\x67\x8d\x6a\x61\x33\xc9\x13\xfb\x0b\x40\x8d\x83\xee\x18\xde\xf5'
    b'\xf6\x08\x3d\x52\xa7\xf4\x60\xad\x82\xa5\xfc\xc4\x38\x0e\xa0\x0a\x14\x2a\x00\x95\x07\x4e\xeb\xd3\xde\x32\x7e\x12'
    b'\xae\xc2\xd1\xac\x18\x05\xa0\x38\x7f\x77\x2a\x09\x64\x39\x97\xb1\x09\xde\x88\xbc\x94\xcf\x96\xfa\xeb\xca\xf7\x2e'
    b'\x65\x53\xe2\x0f\xba\xf8\x3b\x0b\xda\x9a\x2b\x58\x90\xef\x93\x6c\xdc\xc3\xfb\x43\x64\x03\x54\x27\xbb\x1d\xf4\xd5'
    b'\x4e\x4a\x56\x52\xb8\x42\x3d\xd0\xfe\x88\x7f\x97\xe9\x85\x40\xbf\x62\xc9\xfa\x11\x11\x3e\xde\x80\xef\xb5\xc5\xeb'
    b'\x3c\xd6\xed\x5f\x6d\x3b\xcc\x1b\xa8\xb6\x33\x22\x56\xee\xc0\x0e\x04\x23\x4d\x11\xfe\x57\x01\x24\x19\xd7\xf2\x3e'
    b'\x27\x45\xef\xb9\x6e\x93\xcc\xd5\xe4\x83\xcf\xfe\xed\xf8\x17\x1b\xd3\x1f\x9d\x0d\x56\xf8\xa3\xae\x90\xdd\x27\x25'
    b'\x17\xb0\x77\xb8\x36\xc6\xb2\xcb\x12\x8f\x8a\x1b\x90\x39\xe8\x2f\x6c\xb2\x7a\x38\x64\x46\x27\x99\x61\xeb\xa0\x10'
    b'\x56\x9f\x4f\x4e\xa6\x02\x9e\x2d\x7a\x9d\xc7\x07\xde\xe8\xda\x04\xc7\x15\x84\x6e\x97\x2a\x63\xc2\xe5\x26\xbc\x01'
    b'\xec\xb9\xb8\xaa\x59\xb4\x43\x84\x01\xdd\x2f\x1d\xb6\xdd\xbc\xc3\xea\xe9\x3a\xb9\x56\xd1\x24\xe6\x50\x12\x37\x5a'
    b'\xeb\x36\xd5\x0b\x3b\x1e\xc5\xb6\x89\x7c\x59\xe4\x72\xb3\xa9\x77\x0d\x5e\x5c\x55\x4c\xa6\x8d\xe9\x44\x85\xc4\xd0'
    b'\x40\x87\x02\x1f\x7d\x63\x59\x92\x64\xc4\x17\x59\x0a\x71\x40\x94\x41\xe8\x9c\x2d\xae\x2e\x3f\xed\xc8\xde\xe0\x4c'
    b'\xd5\x11\x56\xf6\xdb\x2d\xf8\x19\x84\x7e\x16\x58\x8b\xb8\x46\xf5\xd5\xc8\xf4\x8f\x98\xba\x70\x36\x2c\xe3\xc3\x39'
    b'\x3f\xfc\x6c\xdf\x36\x7e\xea\xd1\x46\xa4\x0f\x41\x0a\x56\x2a\xdc\x0f\x86\xd1\xd9\x87\x2c\x45\x59\x29\x09\xe9\x4c'
    b'\x6e\x06\x52\xf8\x44\x02\xbc\x42\xf3\xa4\x73\xe3\xae\xe8\x16\x24\xbd\x6e\x6a\x8a\xbd\x0d\xe4\xd5\xa4\x82\xf5\x52'
    b'\x41\x4a\x55\xb6\x90\x87\x09\xe3\x4b\xfb\x83\x79\xa2\x2a\x6b\x82\xe9\x7f\x5c\xdf\x24\xda\xe1\x63\x4e\xb1\x64\x47'
    b'\xda\x59\x97\xcf\xd2\x63\x70\xe1\x38\xc7\xd8\xf6\xcf\x7d\x2a\x9e\x90\xcd\xe4\xd9\xda\xfd\xee\x90\xdc\x10\xdb\xb7'
    b'\xb6\x7c\x02\x7e\x0b\xff\xb2\xd5\xb4\xae\x03\x34\x2b\xe3\xf4\x6d\x0c\x43\xbe\xf3\x41\xf6\xdf\x17\xdf\x5a\x0e\xa4'
    b'\x96\x2f\x1b\x20\x3f\x13\xe9\xe8\x81\x42\xed\x70\x8e\xbf\x7c\x56\x90\x8c\x89\xd7\x33\x58\x91\x80\x51\xc3\x24\xf5'
    b'\xe9\xff\xde\xfc\xcf\xfb\x13\xb4\x86\x4a\x79\xd3\x6b\x36\x30\x08\xad\xa7\x43\x7f\x3a\xbd\xea\xc0\xee\x67\x91\x04'
    b'\x6b\x68\x65\x98\x30\x8b\xec\x20\xbc\x42\xcd\xc4\xc5\x50\x9c\x73\xde\xeb\xa6\x40\xaf\xb2\x44\x48\xf0\x14\x06\x59'
    b'\xc8\x0c\x6b\x56\x06\xd2\xce\xae\x36\xc3\x1a\x38\xa5\x05\x6b\xe4\x54\x7c\xa1\x0a\xff\x47\xf0\x82\xf7\x16\x06\xb2'
    b'\xc1\x28\x51\x0e\xed\x0e\x6e\x88\xde\x0c\x47\xb8\xc9\xf1\xe2\xa4\x99\x4a\x77\x6d\x0d\x20\xd0\x9f\xe9\x31\x66\xfc'
    b'\x30\xb7\x35\x4e\x1f\x1e\xff\xcc\xf3\xa9\x8d\x68\xdc\x55\x72\xa0\xc5\xb5\xa1\xe7\x5d\x3a\x8c\x6d\x08\xe4\x18\x9c'
    b'\xb8\x97\xb1\x9c\x72\xbb\xaf\x49\xc0\x6d\x6f\x14\xd7\xf1\x0e\x2c\xaf\xfc\xaf\x30\x0a\x41\x7a\xd0\x44\xf9\xd2\xc5'
    b'\xdf\x8e\x42\x5c\x5d\x2d\xf9\x93\x91\xc5\x3f\x50\x1e\xdc\xda\x48\x2e\x40\x51\x56\x2c\x92\x2e\x7b\xa5\xa7\x18\x82'
    b'\xa4\x5e\xd8\xb6\x55\x10\x69\xd5\x18\xdd\xe7\xff\xbc\x1e\x78\xd2\x68\xd1\xff\xa1\xd7\x8d\x8a\x5c\x16\xda\x8a\x17'
    b'\x99\x5f\xed\x5d\x05\x70\x76\xbc\x80\x50\xe8\x3c\x43\x34\x88\xdd\x05\x9a\x7d\x04\x26\x0c\x1c\xc8\x73\x5e\xae\xc6'
    b'\x9d\xb9\x1a\x49\x9f\xfc\xfd\x00\x61\xef\x4f\xdb\x2d\xda\x87\x13\xca\x64\x22\x78\x60\xc0\xba\x49\xa3\x62\x36\xe8'
    b'\xd3\x4b\x29\xe9\xd6\x9e\x1c\xe3\x91\xd5\xdd\x64\x03\x0f\x90\x4e\x0e\x9a\x12\xdc\x1a\xcf\x08\x2a\x02\x2d\x65\x7b'
    b'\x45\x40\xdc\xfb\xf4\xac\xdb\xe1\x3c\x92\x3d\x38\x14\x4f\x0b\x0a\x88\xa6\x0c\x63\xf4\x22\xab\xa8\xf3\x90\xfb\xf7'
    b'\xe3\x14\x43\xf6\x07\x6e\x1a\x71\x4f\xbd\x88\xbf\xe7\xb7\x88\x52\x97\x64\x91\x0c\xa3\x04\xcf\x9e\x71\x0f\x26\xa7'
    b'\xdd\x9f\x87\x63\x85\x97\x8b\x7e\x33\x69\x1a\xee\x1c\x43\xdf\x67\x14\x85\x0d\xdd\x53\xa0\x15\x29\x5f\xc8\x98\xc4'
    b'\xe7\x37\x5d\x11\x4a\xd9\xb4\x68\x03\xda\xc1\xef\x6f\x37\x15\xfc\xe1\x3f\x0d\xf2\x32\xa2\x3a\xfd\x21\xbc\xc3\xb2'
    b'\x67\x0c\xcb\xd3\x30\x7b\xcd\xca\x27\x83\x75\x32\x69\x01\x93\x91\x5a\x55\xcd\x54\xf3\xba\x50\xbc\x61\x36\xe1\x0e'
    b'\xe6\x57\xf6\xb3\x9f\x3c\x20\xb7\x15\x5d\x56\x86\x8b\x6d\xdc\xee\x59\x45\x75\xc1\xf1\x33\x8a\x81\xeb\xd8\x30\x40'
    b'\xc2\x6d\x70\x42\x67\xf5\x9a\x7a\xdd\xfc\xbd\x6a\x2a\x1c\x0f\xfd\x1e\x37\x40\x18\x61\xcb\xbc\x4d\x28\x3e\x9d\xa5'
    b'\x89\x83\x8c\x68\x3c\xe7\xf3\x52\xce\xd2\x10\x7e\xe1\xe2\xc6\x53\x54\x26\x19\xc6\xf3\x4f\xc7\xd1\x20\x64\x60\x79'
    b'\x1b\xa5\xaa\x91\x22\xbe\xa3\x55\x90\x7f\x08\xcc\x54\xbd\xa7\xcc\x67\x3e\x79\x81\x10\xd2\x32\x64\x3e\x78\x08\xad'
    b'\xbb\x1d\x02\xd7\x48\x99\xc0\xec\x52\x67\xfb\xb3\xc1\x12\xba\x4f\x97\xfb\x31\x7a\xdb\x87\xe2\x31\x3e\x91\x5d\x0f'
    b'\x8b\x4f\xd8\x39\x92\xfa\x9f\xd1\x26\xc9\xac\x29\x1b\x9e\x7b\xbd\xa7\x10\xa7\x1e\x73\x9b\x7a\xb2\x14\xbc\xf6\xf2'
    b'\x5f\x98\x3b\x17\xca\x00\xd9\x42\x6d\x64\xd2\x2c\xb3\xee\xf1\x15\xa6\xd8\xb1\xbd\x64\x89\xef\x20\x0d\x4d\x17\x4f'
    b'\xe6\x3c\x80\xeb\xbc\xbe\x48\x0c\xc0\xd3\x7c\x42\x35\x74\x04\x40\x20\xad\xb6\x9a\x11\x30\xff\x72\x5d\x40\x1a\x96'
    b'\xff\xfb\x11\xc6\x9d\xd3\x0b\xb4\x79\x76\xf4\x6a\xb5\xfb\x12\x92\x06\x0e\x6a\x87\x00\x00\x00\x00\x60\xe8\x1a\x48'
    b'\x12\xd1\xa7\x1c\x00\x01\xf2\x6a\xee\xc7\x01\x00\xac\x84\xd6\xf3\xb1\xc4\x67\xfb\x02\x00\x00\x00\x00\x04\x59\x5a'
)
# BINARY END

if __name__ == '__main__':
    main()
